{"file":"tp-chart-radial.entry.cjs.js","mappings":";;;;;;;AAAA,MAAM,cAAc,GAAG,uoGAAuoG,CAAC;AAC/pG,4BAAe,cAAc;;MCWhB,aAAa;;;;;qBAgB8B,EAAE;;IAGxD,iBAAiB;QACf,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CACtD,4BAA4B,CAC7B,CAAC;QAEF,UAAU,CAAC,OAAO,CAAC,CAAC,QAAQ;YAC1B,MAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACnC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,kBAAkB,IAAI,CAAC,KAAK,GAAG,CAAC;SACzD,CAAC,CAAC;KACJ;IAED,gBAAgB;QACd,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAEpC,MAAM,cAAc,GAAG;YACrB,KAAK,EAAE,CAAC;YACR,OAAO,EAAE,EAAc;SACxB,CAAC;QAEF,KAAK,CAAC,OAAO,CAAC,CAAC,IAAuB;YACpC,cAAc,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC;YACtC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;SACnD,CAAC,CAAC;QAEH,MAAM,aAAa,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAE/C,QACEA,QAACC,UAAI,qDACH,KAAK,EAAEC,iCAAkB,CAAC,KAAK,EAAE;gBAC/B,iBAAiB,EAAE,IAAI;gBACvB,CAAC,oBAAoB,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;aAC5C,CAAC,IAEFF,kEAAK,KAAK,EAAC,4BAA4B,EAAC,OAAO,EAAC,WAAW,IACzDA,qEAAQ,KAAK,EAAC,wBAAwB,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,GAAG,EAC/D,aAAa,CAAC,GAAG,CAAC,CAAC,IAAuB,EAAEG,OAAa;YACxD,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,GAAGA,OAAK,GAAG,CAAC,CAAC;YAC/C,MAAM,kBAAkB,GACtB,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,cAAc,CAAC,KAAK;gBAC7D,GAAG,CAAC;YAEN,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjC,QACEH,oBACE,EAAE,EAAC,IAAI,EACP,EAAE,EAAC,IAAI,EACP,CAAC,EAAC,IAAI,gBACM,aAAa,EACzB,KAAK,EAAC,2BAA2B,EACjC,KAAK,EAAE;wBACL,0BAA0B,EAAE,GAAG,kBAAkB,EAAE;qBACpD,GACD,EACF;aACH;SACF,CAAC,CACE,EAENA,kEAAK,KAAK,EAAC,iCAAiC,IAC1CA,mEAAM,IAAI,EAAC,OAAO,GAAQ,EAC1BA,mEAAM,IAAI,EAAC,UAAU,GAAQ,CACzB,CACD,EACP;KACH;;;;;;;;;;;","names":["h","Host","createColorClasses","index"],"sources":["src/components/core/chart-radial/chart-radial.scss?tag=tp-chart-radial&encapsulation=shadow","src/components/core/chart-radial/chart-radial.tsx"],"sourcesContent":["@use 'sass:map';\r\n\r\n/**\r\n  * @prop --tp-progress-percentage: Propriedade definida dinamicamente no tsx. Define o progresso de um barra circular.\r\n  * @prop --tp-size: Define o tamanho do componente.\r\n  * @prop --tp-title-font-size: Define o font-size do título do componente.\r\n  * @prop --tp-title-line-height: Define o line-height do título do componente.\r\n  * @prop --tp-subtitle-font-size: Define o font-size do subtítulo do componente.\r\n  * @prop --tp-subtitle-line-height: Define o line-height do subtítulo do componente.\r\n*/\r\n\r\n$tp-chart-radial-sizes: (\r\n  xs: (\r\n    properties: (\r\n      tp-size: 48px,\r\n      tp-title-font-size: 12px,\r\n      tp-title-line-height: 12px,\r\n    ),\r\n    rules: (\r\n      display: none,\r\n    ),\r\n  ),\r\n  sm: (\r\n    properties: (\r\n      tp-size: 56px,\r\n      tp-title-font-size: 14px,\r\n      tp-title-line-height: 16px,\r\n    ),\r\n    rules: (\r\n      display: none,\r\n    ),\r\n  ),\r\n  md: (\r\n    properties: (\r\n      tp-size: 80px,\r\n      tp-title-font-size: 16px,\r\n      tp-title-line-height: 16px,\r\n      tp-subtitle-font-size: 10px,\r\n      tp-subtitle-line-height: 12px,\r\n    ),\r\n    rules: (\r\n      display: initial,\r\n    ),\r\n  ),\r\n  lg: (\r\n    properties: (\r\n      tp-size: 108px,\r\n      tp-title-font-size: 20px,\r\n      tp-title-line-height: 20px,\r\n      tp-subtitle-font-size: 12px,\r\n      tp-subtitle-line-height: 12px,\r\n    ),\r\n    rules: (\r\n      display: initial,\r\n    ),\r\n  ),\r\n);\r\n\r\n:host {\r\n  position: relative;\r\n  display: flex;\r\n  width: var(--tp-size, 56px);\r\n  height: var(--tp-size, 56px);\r\n}\r\n\r\n.tp-chart-radial {\r\n  &__container {\r\n    width: var(--tp-size, 56px);\r\n    height: var(--tp-size, 56px);\r\n  }\r\n\r\n  &__track,\r\n  &__progress {\r\n    transform: rotate(-90deg);\r\n    transform-origin: 18px 18px;\r\n    transition: 1s ease-in-out;\r\n    fill: none;\r\n    stroke-dashoffset: 0;\r\n    stroke-width: 2;\r\n    stroke-linecap: round;\r\n    stroke-linejoin: round;\r\n  }\r\n\r\n  &__track {\r\n    stroke: var(--tp-color-neutral-2);\r\n  }\r\n\r\n  &__progress {\r\n    stroke-dasharray: var(--tp-progress-percentage) 100;\r\n  }\r\n\r\n  &__text-container {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    transform: translate(-50%, -50%);\r\n\r\n    ::slotted(ion-label[slot='title']) {\r\n      font-weight: 600 !important;\r\n      font-size: 14px !important;\r\n      line-height: 16px !important;\r\n    }\r\n\r\n    ::slotted(ion-label[slot='subtitle']) {\r\n      display: none;\r\n      font-weight: 400 !important;\r\n    }\r\n  }\r\n}\r\n\r\n//\r\n// color\r\n//\r\n:host(.tp-color) .tp-chart-radial__track {\r\n  stroke: var(--tp-color-base);\r\n}\r\n\r\n//\r\n// size\r\n//\r\n@each $size-name, $size-value in $tp-chart-radial-sizes {\r\n  $properties-map: map.get($size-value, properties);\r\n  $rules-map: map.get($size-value, rules);\r\n\r\n  :host(.tp-chart-radial--#{$size-name}) {\r\n    @if ($properties-map) {\r\n      @each $properties-name, $properties-value in $properties-map {\r\n        --#{$properties-name}: #{$properties-value};\r\n      }\r\n    }\r\n  }\r\n\r\n  :host(.tp-chart-radial--#{$size-name}) .tp-chart-radial__text-container {\r\n    ::slotted(ion-label[slot='title']) {\r\n      font-size: var(--tp-title-font-size) !important;\r\n      line-height: var(--tp-title-line-height) !important;\r\n    }\r\n\r\n    ::slotted(ion-label[slot='subtitle']) {\r\n      font-size: var(--tp-subtitle-font-size) !important;\r\n      line-height: var(--tp-subtitle-line-height) !important;\r\n\r\n      @if ($rules-map) {\r\n        @each $rules-name, $rules-value in $rules-map {\r\n          #{$rules-name}: #{$rules-value};\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, Element, Host, Prop, Watch, h } from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\nimport { TpChartRadialSize } from './utils/chart-radial.enum';\r\nimport { TpChartRadialItem } from './utils/chart-radial.type';\r\n\r\n@Component({\r\n  tag: 'tp-chart-radial',\r\n  styleUrl: 'chart-radial.scss',\r\n  assetsDirs: ['assets'],\r\n  shadow: true,\r\n})\r\nexport class TpChartRadial {\r\n  @Element() host: HTMLElement;\r\n\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * Define o tamanho do componente.\r\n   */\r\n  @Prop({ reflect: true }) size?: TpChartRadialSize;\r\n\r\n  /**\r\n   * Define os valores representados pelo componente.\r\n   */\r\n  @Prop({ reflect: true }) items: TpChartRadialItem[] = [];\r\n\r\n  @Watch('items')\r\n  updateTrackColors() {\r\n    const progresses = this.host.shadowRoot.querySelectorAll<HTMLElement>(\r\n      '.tp-chart-radial__progress',\r\n    );\r\n\r\n    progresses.forEach((progress) => {\r\n      const itemIndex = Number(progress.dataset['index']);\r\n      const item = this.items[itemIndex];\r\n      progress.style.stroke = `var(--tp-color-${item.color})`;\r\n    });\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.updateTrackColors();\r\n  }\r\n\r\n  render() {\r\n    const { color, size, items } = this;\r\n\r\n    const progressesData = {\r\n      total: 0,\r\n      singles: [] as number[],\r\n    };\r\n\r\n    items.forEach((item: TpChartRadialItem) => {\r\n      progressesData.total += item.quantity;\r\n      progressesData.singles.push(progressesData.total);\r\n    });\r\n\r\n    const reversedItems = items.slice(0).reverse();\r\n\r\n    return (\r\n      <Host\r\n        class={createColorClasses(color, {\r\n          'tp-chart-radial': true,\r\n          [`tp-chart-radial--${size}`]: Boolean(size),\r\n        })}\r\n      >\r\n        <svg class=\"tp-chart-radial__container\" viewBox=\"0 0 36 36\">\r\n          <circle class=\"tp-chart-radial__track\" cx=\"18\" cy=\"18\" r=\"16\" />\r\n          {reversedItems.map((item: TpChartRadialItem, index: number) => {\r\n            const originalIndex = items.length - index - 1;\r\n            const progressPercentage =\r\n              (progressesData.singles[originalIndex] / progressesData.total) *\r\n              100;\r\n\r\n            if (!item.ignore && item.quantity) {\r\n              return (\r\n                <circle\r\n                  cx=\"18\"\r\n                  cy=\"18\"\r\n                  r=\"16\"\r\n                  data-index={originalIndex}\r\n                  class=\"tp-chart-radial__progress\"\r\n                  style={{\r\n                    '--tp-progress-percentage': `${progressPercentage}`,\r\n                  }}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </svg>\r\n\r\n        <div class=\"tp-chart-radial__text-container\">\r\n          <slot name=\"title\"></slot>\r\n          <slot name=\"subtitle\"></slot>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}