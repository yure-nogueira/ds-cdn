{"file":"tp-button-cluster.entry.cjs.js","mappings":";;;;;;;AAAA,MAAM,gBAAgB,GAAG,oqCAAoqC;;MCmBhrC,eAAe;;;;QAClB,cAAS,GAAGA,kBAAY,CAAC,8BAA8B,CAAC,CAAC;;yBAUb,IAAI;;;IAYxD,cAAc,CAAC,KAAa;QAC1B,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,eAAe,EAAE,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACpD;IAGD,MAAM,cAAc;QAClB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACpD;IAED,MAAM;QACJ,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEtD,IAAI,OAAO,CAAC;QAEZ,IAAI,OAAO,EAAE;YACX,OAAO,IACLC,iBAAK,KAAK,EAAC,8BAA8B,IACvCA,+BACE,KAAK,EAAC,kCAAkC,EACxC,QAAQ,SACW,EACrBA,+BACE,KAAK,EAAC,kCAAkC,EACxC,QAAQ,SACW,CACjB,CACP,CAAC;SACH;aAAM;YACL,OAAO,IACLA,iBACE,KAAK,EAAC,8BAA8B,EACpC,OAAO,EAAE,CAAC,KAAU;oBAClB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;iBAC5B,IAEDA,kBAAM,IAAI,EAAC,aAAa,GAAQ,EAChCA,sBACE,KAAK,EAAC,yBAAyB,EAC/B,GAAG,EAAE,SAAS,iBACF,MAAM,GACR,EACZA,kBAAM,IAAI,EAAC,eAAe,GAAQ,CAC9B,CACP,CAAC;SACH;QAED,QACEA,QAACC,UAAI,IACH,KAAK,EAAEC,iCAAkB,CAAC,KAAK,EAAE;gBAC/B,mBAAmB,EAAE,IAAI;gBACzB,8BAA8B,EAAE,SAAS;gBACzC,4BAA4B,EAAE,OAAO;aACtC,CAAC,IAED,OAAO,CACH,EACP;KACH;;;;;;;","names":["getAssetPath","h","Host","createColorClasses"],"sources":["src/components/templarios/button-cluster/button-cluster.scss?tag=tp-button-cluster&encapsulation=shadow","src/components/templarios/button-cluster/button-cluster.tsx"],"sourcesContent":[":host {\n  cursor: pointer;\n}\n\n.tp-button-cluster {\n  &__container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    padding: 4px;\n    color: var(--tp-color-brand-4);\n  }\n\n  &__icon {\n    width: 16px;\n    height: 16px;\n    transform: rotate(180deg);\n  }\n\n  &__skeleton-text {\n    --background-rgb: var(--tp-color-neutral-10-rgb);\n    --border-radius: 0;\n    width: 85px;\n    height: 12px;\n    margin: 0 0 4px;\n  }\n\n  &__skeleton-icon {\n    --background-rgb: var(--tp-color-neutral-10-rgb);\n    --border-radius: 0;\n    width: 16px;\n    height: 16px;\n    margin: 0;\n  }\n}\n\n::slotted([slot='expand-text']) {\n  display: none;\n  margin-bottom: 4px !important;\n  color: var(--tp-color-brand-4);\n}\n\n::slotted([slot='collapse-text']) {\n  margin-top: 4px !important;\n  color: var(--tp-color-brand-4);\n}\n\n//\n// collapsed\n//\n:host(.tp-button-cluster--collapsed) {\n  ::slotted([slot='expand-text']) {\n    display: block;\n  }\n\n  ::slotted([slot='collapse-text']) {\n    display: none;\n  }\n\n  .tp-button-cluster__icon {\n    transform: rotate(0deg);\n  }\n}\n\n//\n// loading\n//\n:host(.tp-button-cluster--loading) {\n  pointer-events: none;\n}\n\n//\n// color\n//\n:host(.tp-color) {\n  .tp-button-cluster__icon {\n    color: var(--tp-color-base);\n  }\n\n  ::slotted([slot='expand-text']),\n  ::slotted([slot='collapse-text']) {\n    color: var(--tp-color-base);\n  }\n}\n","import {\n  Component,\n  Event,\n  EventEmitter,\n  Host,\n  Method,\n  Prop,\n  getAssetPath,\n  h,\n} from '@stencil/core';\nimport { createColorClasses } from '../../../utils/functions/color.function';\nimport type { TpColor } from '../../../utils/types/color.type';\n\n@Component({\n  tag: 'tp-button-cluster',\n  styleUrl: 'button-cluster.scss',\n  assetsDirs: ['assets'],\n  shadow: true,\n})\nexport class TpButtonCluster {\n  private arrowIcon = getAssetPath('./assets/tp-chevron-down.svg');\n\n  /**\n   * Define a variação de cor do componente.\n   */\n  @Prop({ reflect: true }) color?: TpColor;\n\n  /**\n   * Define a variação de estado do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) collapsed = true;\n\n  /**\n   * Define o estado de carregamento do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\n\n  /**\n   * Emitido quando a propriedade collapsed é alterada.\n   */\n  @Event() tpButtonClusterCollapsed!: EventEmitter<boolean>;\n\n  toggleInternal(event?: Event) {\n    event?.stopPropagation();\n    this.collapsed = !this.collapsed;\n    this.tpButtonClusterCollapsed.emit(this.collapsed);\n  }\n\n  @Method()\n  async toggleExternal() {\n    this.collapsed = !this.collapsed;\n    this.tpButtonClusterCollapsed.emit(this.collapsed);\n  }\n\n  render() {\n    const { arrowIcon, collapsed, color, loading } = this;\n\n    let content;\n\n    if (loading) {\n      content = (\n        <div class=\"tp-button-cluster__container\">\n          <ion-skeleton-text\n            class=\"tp-button-cluster__skeleton-text\"\n            animated\n          ></ion-skeleton-text>\n          <ion-skeleton-text\n            class=\"tp-button-cluster__skeleton-icon\"\n            animated\n          ></ion-skeleton-text>\n        </div>\n      );\n    } else {\n      content = (\n        <div\n          class=\"tp-button-cluster__container\"\n          onClick={(event: any) => {\n            this.toggleInternal(event);\n          }}\n        >\n          <slot name=\"expand-text\"></slot>\n          <ion-icon\n            class=\"tp-button-cluster__icon\"\n            src={arrowIcon}\n            aria-hidden=\"true\"\n          ></ion-icon>\n          <slot name=\"collapse-text\"></slot>\n        </div>\n      );\n    }\n\n    return (\n      <Host\n        class={createColorClasses(color, {\n          'tp-button-cluster': true,\n          'tp-button-cluster--collapsed': collapsed,\n          'tp-button-cluster--loading': loading,\n        })}\n      >\n        {content}\n      </Host>\n    );\n  }\n}\n"],"version":3}