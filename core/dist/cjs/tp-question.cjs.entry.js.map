{"file":"tp-question.entry.cjs.js","mappings":";;;;;;;AAAA,MAAM,WAAW,GAAG,g4DAAg4D,CAAC;AACr5D,yBAAe,WAAW;;MCSb,UAAU;;;QACb,aAAQ,GAAGA,kBAAY,CAAC,8BAA8B,CAAC,CAAC;;yBAUZ,KAAK;;;;;;IAUzD,MAAM;QACJ,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;KAClC;IAED,MAAM;QACJ,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAEnD,QACEC,QAACC,UAAI,qDACH,KAAK,EAAEC,iCAAkB,CAAC,KAAK,EAAE;gBAC/B,aAAa,EAAE,IAAI;gBACnB,wBAAwB,EAAE,SAAS;aACpC,CAAC,EACF,OAAO,EAAE;gBACP,IAAI,CAAC,MAAM,EAAE,CAAC;aACf,IAEA,KAAK,IAAIF,kEAAK,KAAK,EAAC,mBAAmB,EAAC,SAAS,EAAE,KAAK,GAAQ,EACjEA,kEAAK,KAAK,EAAC,mBAAmB,IAC5BA,oEAAa,CACT,EACNA,uEAAU,KAAK,EAAC,mBAAmB,EAAC,GAAG,EAAE,QAAQ,GAAa,CACzD,EACP;KACH;;;;;;;","names":["getAssetPath","h","Host","createColorClasses"],"sources":["src/components/core/question/question.scss?tag=tp-question&encapsulation=shadow","src/components/core/question/question.tsx"],"sourcesContent":[":host {\r\n  --tp-color: var(--tp-color-neutral-10);\r\n  --tp-background: var(--tp-color-brand-1);\r\n  --tp-lines: 1;\r\n}\r\n\r\n:host {\r\n  background: var(--tp-background);\r\n  color: var(--tp-color);\r\n  padding: 24px;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  line-height: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  width: 100%;\r\n}\r\n\r\n:host .tp-question__icon {\r\n  margin-top: 8px;\r\n  font-size: 24px;\r\n  color: var(--tp-color);\r\n  transition: 200ms transform ease;\r\n}\r\n\r\n:host .tp-question__text {\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: var(--tp-lines);\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n  animation: close 0.15s steps(10, end) backwards;\r\n}\r\n\r\n//\r\n// state\r\n//\r\n\r\n:host(.tp-question--collapsed) .tp-question__text {\r\n  animation: open 0.15s steps(10, end) forwards;\r\n}\r\n\r\n:host(.tp-question--collapsed) .tp-question__icon {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n@keyframes open {\r\n  0% {\r\n    -webkit-line-clamp: var(--tp-lines)\r\n  }\r\n\r\n  10% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 1)\r\n  }\r\n\r\n  20% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 2)\r\n  }\r\n\r\n  30% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 3)\r\n  }\r\n\r\n  40% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 4)\r\n  }\r\n\r\n  50% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 5)\r\n  }\r\n\r\n  60% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 6)\r\n  }\r\n\r\n  70% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 7)\r\n  }\r\n\r\n  80% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 8)\r\n  }\r\n\r\n  90% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 9)\r\n  }\r\n\r\n  100% {\r\n    -webkit-line-clamp: initial\r\n  }\r\n}\r\n\r\n@keyframes close {\r\n  0% {\r\n    -webkit-line-clamp: initial\r\n  }\r\n\r\n  10% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 9)\r\n  }\r\n\r\n  20% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 8)\r\n  }\r\n\r\n  30% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 7)\r\n  }\r\n\r\n  40% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 6)\r\n  }\r\n\r\n  50% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 5)\r\n  }\r\n\r\n  60% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 4)\r\n  }\r\n\r\n  70% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 3)\r\n  }\r\n\r\n  80% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 2)\r\n  }\r\n\r\n  90% {\r\n    -webkit-line-clamp: calc(var(--tp-lines) + 1)\r\n  }\r\n\r\n  100% {\r\n    -webkit-line-clamp: var(--tp-lines)\r\n  }\r\n}\r\n\r\n//\r\n// color\r\n//\r\n\r\n:host(.tp-color) {\r\n  --tp-color: var(--tp-color-contrast);\r\n  --tp-background: var(--tp-color-base);\r\n}","import { Component, getAssetPath, h, Host, Prop } from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport { TpColor } from '../../../utils/types/color.type';\r\n\r\n@Component({\r\n  tag: 'tp-question',\r\n  styleUrl: 'question.scss',\r\n  assetsDirs: ['assets'],\r\n  shadow: true,\r\n})\r\nexport class TpQuestion {\r\n  private iconDown = getAssetPath('./assets/tp-chevron-down.svg');\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) collapsed = false;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Prop() texto?: string;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  toggle() {\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  render() {\r\n    const { collapsed, texto, color, iconDown } = this;\r\n\r\n    return (\r\n      <Host\r\n        class={createColorClasses(color, {\r\n          'tp-question': true,\r\n          'tp-question--collapsed': collapsed,\r\n        })}\r\n        onClick={() => {\r\n          this.toggle();\r\n        }}\r\n      >\r\n        {texto && <div class=\"tp-question__text\" innerHTML={texto}></div>}\r\n        <div class=\"tp-question__text\">\r\n          <slot></slot>\r\n        </div>\r\n        <ion-icon class=\"tp-question__icon\" src={iconDown}></ion-icon>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}