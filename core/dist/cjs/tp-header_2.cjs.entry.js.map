{"file":"tp-header.tp-navbar.entry.cjs.js","mappings":"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","names":["h","Host","createColorClasses"],"sources":["src/components/core/header/header.scss?tag=tp-header&encapsulation=shadow","src/components/core/header/header.tsx","src/components/core/navbar/navbar.scss?tag=tp-navbar&encapsulation=shadow","src/components/core/navbar/navbar.tsx"],"sourcesContent":[":host {\r\n  --tp-background: var(--tp-color-neutral-1);\r\n}\r\n\r\n:host {\r\n  background: var(--tp-background);\r\n  display: block;\r\n  padding-top: var(--ion-safe-area-top);\r\n}","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n} from '@stencil/core';\r\nimport { headerResizeEventDetail } from './utils/header.interface';\r\n\r\n@Component({\r\n  tag: 'tp-header',\r\n  styleUrl: 'header.scss',\r\n  shadow: true,\r\n})\r\nexport class TpHeader {\r\n  @Element() el!: HTMLElement;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Event() headerResize!: EventEmitter<headerResizeEventDetail>;\r\n\r\n  private hostHeight = 0;\r\n  private hostResizeObserver!: ResizeObserver;\r\n\r\n  componentDidLoad() {\r\n    this.setSize();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.hostResizeObserver) {\r\n      this.hostResizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  private setSize() {\r\n    this.hostResizeObserver = new ResizeObserver(() => {\r\n      let newHostHeight = Number(this.el.getBoundingClientRect().height);\r\n\r\n      if (newHostHeight !== this.hostHeight) {\r\n        this.headerResize.emit({ height: newHostHeight });\r\n        this.hostHeight = newHostHeight;\r\n      }\r\n    });\r\n\r\n    this.hostResizeObserver.observe(this.el);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host from-stencil>\r\n        <slot name=\"navbar\"></slot>\r\n        <slot name=\"toolbar\"></slot>\r\n        <slot name=\"progress\"></slot>\r\n        <slot name=\"auxiliar\"></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","// Custom propertie --padding-left setado via tsx \r\n// Custom propertie --padding-right setado via tsx \r\n\r\n:host {\r\n  --tp-background: var(--tp-color-neutral-1);\r\n  --tp-main-color: #{color('neutral', '1', 'contrast')};\r\n  --tp-subtitle-color: var(--tp-color-brand-4);\r\n  --tp-height: 48px;\r\n}\r\n\r\n:host(.tp-navbar) {\r\n  display: block;\r\n\r\n  .tp-navbar {\r\n    &__header {\r\n      background: var(--tp-background);\r\n    }\r\n\r\n    &__container {\r\n      padding-left: 16px;\r\n      padding-right: 16px;\r\n      padding-bottom: 0;\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      box-sizing: border-box;\r\n      min-height: var(--tp-height);\r\n    }\r\n\r\n    &__left,\r\n    &__right {\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n\r\n    &__left {\r\n      justify-content: flex-start;\r\n    }\r\n\r\n    &__right {\r\n      justify-content: flex-end;\r\n    }\r\n\r\n    &__center {\r\n      padding-left: var(--padding-left);\r\n      padding-right: var(--padding-right);\r\n\r\n      // padding-top: var(--spacing-stack-xxxs);\r\n      // padding-bottom: var(--spacing-stack-xxxs);\r\n\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      flex-direction: column;\r\n      text-align: center;\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n\r\n//\r\n// slotted\r\n//\r\n\r\n:host(.tp-navbar) ::slotted(*) {\r\n  margin: 0 !important;\r\n  padding: 0 !important;\r\n}\r\n\r\n:host(.tp-navbar) ::slotted([slot=\"left\"]) {\r\n  color: var(--tp-main-color);\r\n  margin-right: 16px !important;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n}\r\n\r\n:host(.tp-navbar) ::slotted([slot=\"title\"]) {\r\n  color: var(--tp-main-color);\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  line-height: 16px;\r\n  display: block;\r\n}\r\n\r\n:host(.tp-navbar) ::slotted([slot=\"subtitle\"]) {\r\n  color: var(--tp-subtitle-color);\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  line-height: 16px;\r\n  display: block;\r\n}\r\n\r\n:host(.tp-navbar) ::slotted([slot=\"right\"]) {\r\n  color: var(--tp-main-color);\r\n  margin-left: 16px !important;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n}\r\n\r\n//\r\n// color\r\n//\r\n\r\n:host(.tp-color) ::slotted([slot=\"subtitle\"]) {\r\n  --tp-subtitle-color: var(--tp-color-base);\r\n}\r\n\r\n//\r\n// transparent\r\n//\r\n\r\n:host(.tp-navbar--transparent) {\r\n  --tp-background: transparent;\r\n}","import { Component, Element, h, Host, Prop } from '@stencil/core';\r\n//import ResizeObserver from 'resize-observer-polyfill';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport { TpColor } from '../../../utils/types/color.type';\r\n\r\n@Component({\r\n  tag: 'tp-navbar',\r\n  styleUrl: 'navbar.scss',\r\n  shadow: true,\r\n})\r\nexport class TpNavbar {\r\n  @Element() el!: HTMLElement;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Prop() name?: 'secondary' | 'transparent';\r\n\r\n  private leftEl!: HTMLDivElement;\r\n  private rightEl!: HTMLDivElement;\r\n  private centerEl!: HTMLDivElement;\r\n\r\n  private sidesResizeObserver!: ResizeObserver;\r\n\r\n  componentDidLoad() {\r\n    this.setSize();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.sidesResizeObserver) {\r\n      this.sidesResizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  private setSize() {\r\n    this.sidesResizeObserver = new ResizeObserver((entries: any) => {\r\n      for (let entry of entries) {\r\n        const rightWidth = Number(this.rightEl.getBoundingClientRect().width);\r\n        const leftWidth = Number(this.leftEl.getBoundingClientRect().width);\r\n        const leftDiff = entry.contentRect.width - rightWidth;\r\n        const rightDiff = entry.contentRect.width - leftWidth;\r\n\r\n        let marginLeft = 0;\r\n        let marginRight = 0;\r\n\r\n        if (rightWidth !== leftWidth) {\r\n          if (entry.target.id === 'left') {\r\n            if (leftDiff > 0) {\r\n              marginRight = leftDiff;\r\n            } else {\r\n              marginLeft = rightDiff - leftDiff;\r\n              if (marginLeft < 0) {\r\n                marginLeft *= -1;\r\n              }\r\n            }\r\n          } else if (entry.target.id === 'right') {\r\n            if (rightDiff > 0) {\r\n              marginLeft = rightDiff;\r\n            } else {\r\n              marginRight = rightDiff - leftDiff;\r\n              if (marginRight < 0) {\r\n                marginRight *= -1;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        this.centerEl.style.setProperty('--padding-left', `${marginLeft}px`);\r\n        this.centerEl.style.setProperty('--padding-right', `${marginRight}px`);\r\n      }\r\n    });\r\n\r\n    this.sidesResizeObserver.observe(this.leftEl);\r\n    this.sidesResizeObserver.observe(this.rightEl);\r\n  }\r\n\r\n  render() {\r\n    const { color, name } = this;\r\n\r\n    return (\r\n      <Host\r\n        from-stencil\r\n        class={createColorClasses(color, {\r\n          'tp-navbar': true,\r\n          [`tp-navbar--${name}`]: name !== undefined,\r\n        })}\r\n      >\r\n        <header class=\"tp-navbar__header\">\r\n          <slot name=\"top\"></slot>\r\n\r\n          <div class=\"tp-navbar__container\">\r\n            <div\r\n              id=\"left\"\r\n              class=\"tp-navbar__left\"\r\n              ref={(el) => (this.leftEl = el as HTMLDivElement)}\r\n            >\r\n              <slot name=\"left\"></slot>\r\n            </div>\r\n\r\n            <div\r\n              class=\"tp-navbar__center\"\r\n              ref={(el) => (this.centerEl = el as HTMLDivElement)}\r\n            >\r\n              <slot name=\"title\"></slot>\r\n              <slot name=\"subtitle\"></slot>\r\n            </div>\r\n\r\n            <div\r\n              id=\"right\"\r\n              class=\"tp-navbar__right\"\r\n              ref={(el) => (this.rightEl = el as HTMLDivElement)}\r\n            >\r\n              <slot name=\"right\"></slot>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}