{"file":"tp-pagination.entry.cjs.js","mappings":"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","names":["h","Host","createColorClasses"],"sources":["src/components/core/pagination/utils/pagination.enum.ts","src/components/core/pagination/utils/pagination.contant.ts","src/components/core/pagination/pagination.scss?tag=tp-pagination&encapsulation=scoped","src/components/core/pagination/pagination.tsx"],"sourcesContent":["export enum TpEnumPaginationRole {\r\n  GOTO = 'goto',\r\n  HIDDEN = 'hidden',\r\n  PREVIOUS = 'previous',\r\n  NEXT = 'next',\r\n}\r\n\r\nexport enum TpEnumPaginationSize {\r\n  XS = 'xs',\r\n  SM = 'sm',\r\n}\r\n\r\nexport enum TpEnumPaginationDirection {\r\n  FORWARD = 'forward',\r\n  BACKWARD = 'backward',\r\n}\r\n","import {\r\n  TpEnumPaginationDirection,\r\n  TpEnumPaginationRole,\r\n  TpEnumPaginationSize,\r\n} from './pagination.enum';\r\nimport { TpPaginationConfig } from './pagination.type';\r\n\r\nexport const TP_PAGINATION: TpPaginationConfig = {\r\n  ROLE: Object.fromEntries(Object.entries(TpEnumPaginationRole)),\r\n  DIRECTION: Object.fromEntries(Object.entries(TpEnumPaginationDirection)),\r\n  SIZES: Object.values(TpEnumPaginationSize),\r\n  BUTTON_LIMIT: 5,\r\n  HIDDEN_BUTTON_LABEL: '...',\r\n  DEFAULT_COLOR: 'neutral-2',\r\n  DEFAULT_SIZE: 'xs',\r\n};\r\n","@import '../../../styles/templarios.abstracts';\r\n\r\n:host {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n}\r\n\r\n.tp-pagination {\r\n  &__item {\r\n    --border-radius: 4px;\r\n    --padding-start: 16px;\r\n    --padding-end: 16px;\r\n\r\n    &:not(:first-child) {\r\n      margin-left: 0.8rem;\r\n    }\r\n  }\r\n}\r\n","import { Component, Host, h, Prop, EventEmitter, Event } from '@stencil/core';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\nimport {\r\n  TpPaginationButtonConfig,\r\n  TpPaginationDirection,\r\n  TpPaginationSize,\r\n} from './utils/pagination.type';\r\nimport { TP_PAGINATION } from './utils/pagination.contant';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\n\r\n@Component({\r\n  tag: 'tp-pagination',\r\n  styleUrl: 'pagination.scss',\r\n  scoped: true,\r\n})\r\nexport class TpPagination {\r\n  /**\r\n   * A variação de cor dos botões do componente.\r\n   */\r\n  @Prop({ reflect: true }) color: TpColor = TP_PAGINATION.DEFAULT_COLOR;\r\n\r\n  /**\r\n   * A variação de tamanho dos botões do componente.\r\n   */\r\n  @Prop({ reflect: true }) size: TpPaginationSize = TP_PAGINATION.DEFAULT_SIZE;\r\n\r\n  /**\r\n   * O número total de páginas.\r\n   */\r\n  @Prop({ reflect: true }) pageCount: number;\r\n\r\n  /**\r\n   * Índice da página atual.\r\n   */\r\n  @Prop({ reflect: true }) currentPage: number;\r\n\r\n  /**\r\n   * Emitido quando há clique no botão de uma página específica.\r\n   */\r\n  @Event() tpNavigate: EventEmitter<number>;\r\n\r\n  /**\r\n   * Emitido quando há clique no botão de seguir para a página anterior.\r\n   */\r\n  @Event() tpPrevious: EventEmitter<null>;\r\n\r\n  /**\r\n   * Emitido quando há clique no botão de seguir para a próxima página.\r\n   */\r\n  @Event() tpNext: EventEmitter<null>;\r\n\r\n  /**\r\n   * Emitido quando há clique no botão que oculta páginas\r\n   * específicas, não mostradas nos botões do estado atual.\r\n   */\r\n  @Event() tpPageJump: EventEmitter<TpPaginationDirection>;\r\n\r\n  onPaginationButtonClick(buttonConfig: TpPaginationButtonConfig) {\r\n    const { label, role, direction } = buttonConfig;\r\n\r\n    if (role === TP_PAGINATION.ROLE.GOTO) return this.tpNavigate.emit(+label);\r\n\r\n    if (role === TP_PAGINATION.ROLE.HIDDEN)\r\n      return this.tpPageJump.emit(direction);\r\n\r\n    if (role === TP_PAGINATION.ROLE.PREVIOUS) return this.tpPrevious.emit();\r\n\r\n    if (role === TP_PAGINATION.ROLE.NEXT) return this.tpNext.emit();\r\n  }\r\n\r\n  getPaginationButtons() {\r\n    const { color, size, pageCount, currentPage } = this;\r\n\r\n    return Array.from({ length: pageCount })\r\n      .map((_, index) => {\r\n        const pageIndex = index + 1;\r\n\r\n        /**\r\n         * Se o número total de páginas (pageCount) for menor que 'BUTTON_LIMIT',\r\n         * mostra todos os botões de navegação\r\n         * BUTTON_LIMIT: numéro máximo que o total de páginas (pageCount)\r\n         * deve ter para que sejam mostrados todos os botões de navegação.\r\n         */\r\n        if (pageCount <= TP_PAGINATION.BUTTON_LIMIT) {\r\n          return {\r\n            label: pageIndex,\r\n            role: TP_PAGINATION.ROLE.GOTO,\r\n            direction: null,\r\n          } as TpPaginationButtonConfig;\r\n        }\r\n\r\n        /**\r\n         * Se a página atual for a primeira ou a última e a distância\r\n         * entre os índices do botão atual e página atual for menor ou igual a 2,\r\n         * o botão do índice atual deverá ser renderizado.\r\n         */\r\n        if (\r\n          [1, pageCount].includes(currentPage) &&\r\n          Math.abs(pageIndex - currentPage) <= 2\r\n        ) {\r\n          return {\r\n            label: pageIndex,\r\n            role: TP_PAGINATION.ROLE.GOTO,\r\n            direction: null,\r\n          } as TpPaginationButtonConfig;\r\n        }\r\n\r\n        /**\r\n         * Se o índice atual estiver entre o primeiro e a página atual (currentPage),\r\n         * o primeiro botão a cair nessa condição será renderizado como hidden\r\n         * e representará todos os outros índices que cairem nessa condição em\r\n         * sequência, até encontrar um botão que será renderizado.\r\n         */\r\n        if (pageIndex > 1 && pageIndex < currentPage - 1) {\r\n          return {\r\n            label: TP_PAGINATION.HIDDEN_BUTTON_LABEL,\r\n            role: pageIndex - 1 === 1 ? TP_PAGINATION.ROLE.HIDDEN : null,\r\n            direction: TP_PAGINATION.DIRECTION.BACKWARD,\r\n          } as TpPaginationButtonConfig;\r\n        }\r\n\r\n        /**\r\n         * Se o índice atual estiver entre a página atual (currentPage) e a última\r\n         * página, o primeiro botão a cair nessa condição será renderizado como\r\n         * hidden e representará todos os outros índices que cairem nessa condição em\r\n         * sequência, até encontrar um botão que será renderizado.\r\n         */\r\n        if (pageIndex < pageCount && pageIndex > currentPage + 1) {\r\n          return {\r\n            label: TP_PAGINATION.HIDDEN_BUTTON_LABEL,\r\n            role:\r\n              pageIndex === pageCount - 1 ? TP_PAGINATION.ROLE.HIDDEN : null,\r\n            direction: TP_PAGINATION.DIRECTION.FORWARD,\r\n          } as TpPaginationButtonConfig;\r\n        }\r\n\r\n        /**\r\n         * Caso 'default' para todos os botões com índices que não caem\r\n         * em nenhuma das condições acima.\r\n         */\r\n        return {\r\n          label: pageIndex,\r\n          role: TP_PAGINATION.ROLE.GOTO,\r\n          direction: null,\r\n        } as TpPaginationButtonConfig;\r\n      })\r\n      .filter(({ role }) => role)\r\n      .map((buttonConfig) => (\r\n        <ion-button\r\n          onClick={() => this.onPaginationButtonClick(buttonConfig)}\r\n          class=\"tp-pagination__item\"\r\n          color={color}\r\n          // @ts-ignore\r\n          size={size}\r\n          disabled={+buttonConfig.label === currentPage}\r\n        >\r\n          {buttonConfig.label}\r\n        </ion-button>\r\n      ));\r\n  }\r\n\r\n  render() {\r\n    const { color, size, pageCount, currentPage } = this;\r\n\r\n    const paginationButtons = this.getPaginationButtons();\r\n\r\n    return (\r\n      <Host class={createColorClasses(color, { ['tp-pagination']: true })}>\r\n        {pageCount > 1 && (\r\n          <ion-button\r\n            onClick={() =>\r\n              this.onPaginationButtonClick({\r\n                role: TP_PAGINATION.ROLE.PREVIOUS,\r\n              })\r\n            }\r\n            class=\"tp-pagination__item\"\r\n            color={color}\r\n            // @ts-ignore\r\n            size={size}\r\n            fill=\"clear\"\r\n            disabled={currentPage === 1}\r\n          >\r\n            <ion-icon\r\n              slot=\"start\"\r\n              src=\"./assets/tp-chevron-left.svg\"\r\n            ></ion-icon>\r\n          </ion-button>\r\n        )}\r\n\r\n        {paginationButtons}\r\n\r\n        {pageCount > 1 && (\r\n          <ion-button\r\n            onClick={() =>\r\n              this.onPaginationButtonClick({ role: TP_PAGINATION.ROLE.NEXT })\r\n            }\r\n            class=\"tp-pagination__item\"\r\n            color={color}\r\n            // @ts-ignore\r\n            size={size}\r\n            fill=\"clear\"\r\n            disabled={currentPage === pageCount}\r\n          >\r\n            <ion-icon\r\n              slot=\"start\"\r\n              src=\"./assets/tp-chevron-right.svg\"\r\n            ></ion-icon>\r\n          </ion-button>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}