{"file":"tp-button-cluster.js","mappings":";;;AAEO,MAAM,iBAAiB,GAAG;IAC/B,KAAK,EAAE;QACL,WAAW,EAAE,YAAY,CAAC,8BAA8B,CAAC;KAC1D;CACF;;ACND,MAAM,gBAAgB,GAAG,+1BAA+1B,CAAC;AACz3B,8BAAe,gBAAgB;;MCkBlBA,iBAAe;;;;;;;qCASuB,IAAI;yBAKhC,IAAI;;;;;IAUzB,MAAM;QACJ,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACtC;;;;IAKD,iBAAiB;QACf,IAAI,IAAI,CAAC,qBAAqB,KAAK,IAAI,CAAC,SAAS,EAAE;YACjD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC;SAC7C;KACF;IAED,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;QAElC,QACE,EAAC,IAAI,qDACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,mBAAmB,EAAE,IAAI;gBACzB,8BAA8B,EAAE,SAAS;aAC1C,CAAC,IAEF,4DAAK,KAAK,EAAC,8BAA8B,EAAC,OAAO,EAAE,MAAM,IAAI,CAAC,MAAM,EAAE,IACpE,6DAAM,IAAI,EAAC,aAAa,GAAQ,EAChC,iEACE,KAAK,EAAC,yBAAyB,EAC/B,GAAG,EAAE,iBAAiB,CAAC,KAAK,CAAC,WAAW,iBAC5B,MAAM,GACR,EACZ,6DAAM,IAAI,EAAC,eAAe,GAAQ,CAC9B,CACD,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["TpButtonCluster"],"sources":["src/components/core/button-cluster/utils/button-cluster.constant.ts","src/components/core/button-cluster/button-cluster.scss?tag=tp-button-cluster&encapsulation=shadow","src/components/core/button-cluster/button-cluster.tsx"],"sourcesContent":["import { getAssetPath } from '@stencil/core';\r\n\r\nexport const TP_BUTTON_CLUSTER = {\r\n  icons: {\r\n    chevronDown: getAssetPath('./assets/tp-chevron-down.svg'),\r\n  },\r\n};\r\n",":host {\r\n  cursor: pointer;\r\n}\r\n\r\n.tp-button-cluster {\r\n  &__container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding: 4px;\r\n    color: var(--tp-color-brand-4);\r\n  }\r\n\r\n  &__icon {\r\n    width: 16px;\r\n    height: 16px;\r\n    transform: rotate(180deg);\r\n  }\r\n}\r\n\r\n::slotted([slot='text-expand']) {\r\n  display: none;\r\n  margin-bottom: 4px !important;\r\n  color: var(--tp-color-brand-4);\r\n}\r\n\r\n::slotted([slot='text-collapse']) {\r\n  margin-top: 4px !important;\r\n  color: var(--tp-color-brand-4);\r\n}\r\n\r\n//\r\n// collapsed\r\n//\r\n:host(.tp-button-cluster--collapsed) {\r\n  ::slotted([slot='text-expand']) {\r\n    display: block;\r\n  }\r\n\r\n  ::slotted([slot='text-collapse']) {\r\n    display: none;\r\n  }\r\n\r\n  .tp-button-cluster__icon {\r\n    transform: rotate(0deg);\r\n  }\r\n}\r\n\r\n//\r\n// color\r\n//\r\n:host(.tp-color) {\r\n  .tp-button-cluster__icon {\r\n    color: var(--tp-color-base);\r\n  }\r\n\r\n  ::slotted([slot='text-expand']),\r\n  ::slotted([slot='text-collapse']) {\r\n    color: var(--tp-color-base);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  h,\r\n} from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\nimport { TP_BUTTON_CLUSTER } from './utils/button-cluster.constant';\r\n\r\n@Component({\r\n  tag: 'tp-button-cluster',\r\n  styleUrl: 'button-cluster.scss',\r\n  assetsDirs: ['assets'],\r\n  shadow: true,\r\n})\r\nexport class TpButtonCluster {\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color: TpColor;\r\n\r\n  /**\r\n   * Define o estato inicial do componente.\r\n   */\r\n  @Prop({ reflect: true }) initialCollapsedState = true;\r\n\r\n  /**\r\n   * Define a variação de estado do componente.\r\n   */\r\n  @State() collapsed = true;\r\n\r\n  /**\r\n   * Emitido quando a propriedade collapsed é alterada.\r\n   */\r\n  @Event() tpCollapse: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Métodos internos.\r\n   */\r\n  toggle() {\r\n    this.collapsed = !this.collapsed;\r\n    this.tpCollapse.emit(this.collapsed);\r\n  }\r\n\r\n  /**\r\n   * Lifecycle hooks.\r\n   */\r\n  componentWillLoad() {\r\n    if (this.initialCollapsedState !== this.collapsed) {\r\n      this.collapsed = this.initialCollapsedState;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { color, collapsed } = this;\r\n\r\n    return (\r\n      <Host\r\n        class={createColorClasses(color, {\r\n          'tp-button-cluster': true,\r\n          'tp-button-cluster--collapsed': collapsed,\r\n        })}\r\n      >\r\n        <div class=\"tp-button-cluster__container\" onClick={() => this.toggle()}>\r\n          <slot name=\"text-expand\"></slot>\r\n          <ion-icon\r\n            class=\"tp-button-cluster__icon\"\r\n            src={TP_BUTTON_CLUSTER.icons.chevronDown}\r\n            aria-hidden=\"true\"\r\n          ></ion-icon>\r\n          <slot name=\"text-collapse\"></slot>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}