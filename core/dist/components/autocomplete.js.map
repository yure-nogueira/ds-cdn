{"file":"autocomplete.js","mappings":";;;AAAA,MAAM,eAAe,GAAG,sqDAAsqD,CAAC;AAC/rD,6BAAe,eAAe;;MCiBjB,cAAc;;;;;sBAUS,KAAK;2BAMA,KAAK;oBAK5B,KAAK;;;;;;IAgBrB,mBAAmB,CAAC,KAAiB;QACnC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAc,CAAC;QAEpC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC/B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;SACnB;KACF;IAGD,WAAW,CAAC,KAA+B;QACzC,IAAI,CAAC,UAAU,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACtC;IAGD,WAAW;QACT,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC1D;IAED,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAErC,QACE,EAAC,IAAI,qDACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,iBAAiB,EAAE,IAAI;gBACvB,gCAAgC,EAAE,MAAM,IAAI,CAAC,IAAI;gBACjD,gCAAgC,EAAE,CAAC,MAAM,IAAI,IAAI;aAClD,CAAC,IAEF,8DAAa,CACR,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/core/autocomplete/autocomplete.scss?tag=tp-autocomplete&encapsulation=scoped","src/components/core/autocomplete/autocomplete.tsx"],"sourcesContent":["/**\r\n * --tp-input-element-height: Define o tamanho do elemento que recebe input. \r\n * --tp-dropdown-max-height: Define o tamanho máximo do dropdown.\r\n */\r\n\r\n:host {\r\n  --tp-input-element-height: 42px;\r\n  --tp-dropdown-max-height: 164px;\r\n}\r\n\r\n:host {\r\n  display: block;\r\n  position: relative;\r\n\r\n  &::slotted(tp-dropdown) {\r\n    --tp-top: var(--tp-input-element-height);\r\n    max-height: var(--tp-dropdown-max-height);\r\n    background: var(--tp-color-neutral-2);\r\n    cursor: pointer;\r\n    overflow: auto;\r\n    border: 1px solid transparent;\r\n  }\r\n}\r\n\r\n:host(.tp-autocomplete.tp-autocomplete--dropdown-hide) {\r\n  opacity: 1;\r\n  animation-duration: 300ms;\r\n  animation-timing-function: ease-in-out;\r\n  animation-fill-mode: forwards;\r\n\r\n  &::slotted(tp-dropdown) {\r\n    opacity: 0;\r\n    pointer-events: none;\r\n    animation-name: fadeOut;\r\n    animation-duration: 300ms;\r\n    animation-timing-function: ease-in-out;\r\n\r\n    @keyframes fadeOut {\r\n      0% {\r\n        opacity: 1;\r\n      }\r\n\r\n      100% {\r\n        opacity: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n:host(.tp-autocomplete.tp-autocomplete--dropdown-show) {\r\n  opacity: 1;\r\n  animation-duration: 300ms;\r\n  animation-timing-function: ease-in-out;\r\n  animation-fill-mode: forwards;\r\n\r\n  &::slotted(tp-input-container) {\r\n    --tp-border-radius: 8px 8px 0 0;\r\n  }\r\n\r\n  &::slotted(tp-dropdown) {\r\n    opacity: 1;\r\n    animation-name: showUp;\r\n    animation-duration: 300ms;\r\n    animation-timing-function: ease-in-out;\r\n\r\n    @keyframes showUp {\r\n      0% {\r\n        opacity: 0;\r\n      }\r\n\r\n      100% {\r\n        opacity: 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n//\r\n// color\r\n//\r\n:host(.tp-color) {\r\n  ::slotted(tp-dropdown) {\r\n    --tp-scroll-color-content: var(--tp-color-contrast);\r\n    --tp-scroll-color-track: var(--tp-color-base);\r\n    background-color: var(--tp-color-base);\r\n    border: 1px solid var(--tp-color-base);\r\n    border-top: initial;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Host,\r\n  Listen,\r\n  Prop,\r\n  State,\r\n  h,\r\n} from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport { TpColor } from '../../../utils/types/color.type';\r\nimport { IonInputCustomEvent } from '@ionic/core';\r\n\r\n@Component({\r\n  tag: 'tp-autocomplete',\r\n  styleUrl: 'autocomplete.scss',\r\n  scoped: true,\r\n})\r\nexport class TpAutocomplete {\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color: TpColor;\r\n\r\n  /**\r\n   * Define se o componente deve ou não bloquear a renderização\r\n   * do dropdown.\r\n   */\r\n  @Prop({ reflect: true }) locked = false;\r\n\r\n  /**\r\n   * Define se o componente deve ou não renderizar o dropdown\r\n   * quando o slot que recebe um input ganha foco.\r\n   */\r\n  @Prop({ reflect: true }) openOnFocus = false;\r\n\r\n  /**\r\n   * O estado do dropdown (aberto ou fechado).\r\n   */\r\n  @State() open = false;\r\n\r\n  /**\r\n   * O valor recebido pelo input renderizado no slot.\r\n   */\r\n  @State() inputValue: string;\r\n\r\n  /**\r\n   * Referência ao host.\r\n   */\r\n  @Element() host: HTMLElement;\r\n\r\n  /**\r\n   * Event listeners.\r\n   */\r\n  @Listen('click', { target: 'body' })\r\n  closeOnOutsideClick(event: MouseEvent) {\r\n    const target = event.target as Node;\r\n\r\n    if (!this.host.contains(target)) {\r\n      this.open = false;\r\n    }\r\n  }\r\n\r\n  @Listen('ionInput')\r\n  handleInput(event: IonInputCustomEvent<any>) {\r\n    this.inputValue = `${event.target.value}`;\r\n    this.open = Boolean(this.inputValue);\r\n  }\r\n\r\n  @Listen('ionFocus')\r\n  handleFocus() {\r\n    this.open = this.openOnFocus || Boolean(this.inputValue);\r\n  }\r\n\r\n  render() {\r\n    const { color, open, locked } = this;\r\n\r\n    return (\r\n      <Host\r\n        class={createColorClasses(color, {\r\n          'tp-autocomplete': true,\r\n          'tp-autocomplete--dropdown-hide': locked || !open,\r\n          'tp-autocomplete--dropdown-show': !locked && open,\r\n        })}\r\n      >\r\n        <slot></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}