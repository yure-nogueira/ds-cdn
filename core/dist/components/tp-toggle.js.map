{"file":"tp-toggle.js","mappings":";;;AAAA,MAAM,SAAS,GAAG,wkCAAwkC,CAAC;AAC3lC,uBAAe,SAAS;;MCiBXA,UAAQ;;;;QACX,WAAM,GAAG,YAAY,CAAC,4BAA4B,CAAC,CAAC;;yBAaR,IAAI;yBAKJ,KAAK;;IAEzD,gBAAgB;QACb,IAAI,CAAC,OAAuB,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CACrD,qBAAqB,CACrB,CAAC;KACJ;IAED,SAAS;;QACP,MAAM,aAAa,GAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,YAAY,CAAC;QAChD,IAAI,CAAC,OAAuB,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,aAAa,IAAI,CAAC;KACtE;IAED,IAAI;QACF,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,UAAU,CAAC;YACR,IAAI,CAAC,OAAuB,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;SACxD,EAAE,GAAG,CAAC,CAAC;KACT;IAED,KAAK;QACH,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,UAAU,CAAC;YACR,IAAI,CAAC,OAAuB,CAAC,KAAK,CAAC,SAAS;gBAC3C,8BAA8B,CAAC;SAClC,EAAE,GAAG,CAAC,CAAC;KACT;IAGD,MAAM;QACJ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;aAAM;YACL,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;KACF;IAED,gBAAgB;QACd,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;SAClC;KACF;IAED,WAAW;QACT,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;SAClC;KACF;IAED,MAAM;QACJ,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAErD,QACE,EAAC,IAAI,qDACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,WAAW,EAAE,IAAI;gBACjB,sBAAsB,EAAE,SAAS;gBACjC,uBAAuB,EAAE,SAAS;aACnC,CAAC,EACF,OAAO,EAAE;gBACP,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACzB,IAED,4DAAK,KAAK,EAAC,oBAAoB,IAC7B,8DAAa,CACT,EACN,4DACE,KAAK,EAAC,mBAAmB,EACzB,OAAO,EAAE;gBACP,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB,IAED,iEAAU,KAAK,EAAC,iBAAiB,EAAC,GAAG,EAAE,MAAM,GAAa,CACtD,CACD,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["TpToggle"],"sources":["src/components/core/toggle/toggle.scss?tag=tp-toggle&encapsulation=scoped","src/components/core/toggle/toggle.tsx"],"sourcesContent":[":host {\r\n  --tp-background: var(--tp-color-neutral-2);\r\n  --tp-color: var(--tp-color-neutral-10);\r\n  --tp-padding: 24px;\r\n  --tp-border-radius: 0;\r\n  --tp-initial-max-height: 20px;\r\n}\r\n\r\n:host {\r\n  background: var(--tp-background);\r\n  color: var(--tp-color);\r\n  padding: var(--tp-padding);\r\n  border-radius: var(--tp-border-radius);\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n}\r\n\r\n:host .tp-toggle__content {\r\n  max-height: var(--tp-initial-max-height);\r\n  overflow: hidden;\r\n  transition: all .3s;\r\n}\r\n\r\n:host .tp-toggle__bottom {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n}\r\n\r\n:host .tp-toggle__icon {\r\n  align-self: center;\r\n  margin-top: 8px;\r\n  font-size: 24px;\r\n  color: var(--tp-color);\r\n  transition: .3s transform ease;\r\n}\r\n\r\n//\r\n// state\r\n//\r\n\r\n:host(.tp-toggle--collapsed) .tp-toggle__icon {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n//\r\n// icon-click\r\n//\r\n\r\n:host(.tp-toggle--icon-click) {\r\n  cursor: unset;\r\n}\r\n\r\n:host(.tp-toggle--icon-click) .tp-toggle__bottom {\r\n  cursor: pointer;\r\n}\r\n\r\n//\r\n// color\r\n//\r\n\r\n:host(.tp-color) {\r\n  --tp-color: var(--tp-color-contrast);\r\n  --tp-background: var(--tp-color-base);\r\n}","import {\r\n  Component,\r\n  h,\r\n  Host,\r\n  Prop,\r\n  Element,\r\n  Watch,\r\n  getAssetPath,\r\n} from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport { TpColor } from '../../../utils/types/color.type';\r\n\r\n@Component({\r\n  tag: 'tp-toggle',\r\n  styleUrl: 'toggle.scss',\r\n  assetsDirs: ['assets'],\r\n  scoped: true,\r\n})\r\nexport class TpToggle {\r\n  private iconUp = getAssetPath('./assets/tp-chevron-up.svg');\r\n\r\n  @Element() host!: HTMLElement;\r\n  element?: HTMLElement;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) collapsed = true;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) iconClick = false;\r\n\r\n  componentDidLoad() {\r\n    (this.element as HTMLElement) = this.host.querySelector(\r\n      '.tp-toggle__content',\r\n    )!;\r\n  }\r\n\r\n  setHeight() {\r\n    const elementHeight = this.element?.scrollHeight;\r\n    (this.element as HTMLElement).style.maxHeight = `${elementHeight}px`;\r\n  }\r\n\r\n  open() {\r\n    this.setHeight();\r\n    setTimeout(() => {\r\n      (this.element as HTMLElement).style.maxHeight = '100%';\r\n    }, 300);\r\n  }\r\n\r\n  close() {\r\n    this.setHeight();\r\n    setTimeout(() => {\r\n      (this.element as HTMLElement).style.maxHeight =\r\n        'var(--tp-initial-max-height)';\r\n    }, 350);\r\n  }\r\n\r\n  @Watch('collapsed')\r\n  toggle() {\r\n    if (!this.collapsed) {\r\n      this.open();\r\n    } else {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  onClickComponent() {\r\n    if (!this.iconClick) {\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n  }\r\n\r\n  onClickIcon() {\r\n    if (this.iconClick) {\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { collapsed, color, iconClick, iconUp } = this;\r\n\r\n    return (\r\n      <Host\r\n        class={createColorClasses(color, {\r\n          'tp-toggle': true,\r\n          'tp-toggle--collapsed': collapsed,\r\n          'tp-toggle--icon-click': iconClick,\r\n        })}\r\n        onClick={() => {\r\n          this.onClickComponent();\r\n        }}\r\n      >\r\n        <div class=\"tp-toggle__content\">\r\n          <slot></slot>\r\n        </div>\r\n        <div\r\n          class=\"tp-toggle__bottom\"\r\n          onClick={() => {\r\n            this.onClickIcon();\r\n          }}\r\n        >\r\n          <ion-icon class=\"tp-toggle__icon\" src={iconUp}></ion-icon>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}