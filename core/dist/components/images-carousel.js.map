{"file":"images-carousel.js","mappings":";;AAAA,MAAM,iBAAiB,GAAG,wrEAAwrE,CAAC;AACntE,+BAAe,iBAAiB;;MCOnB,gBAAgB;;;;;;;QAwB3B,mBAAc,GAAG;YACf,aAAa,EAAE,CAAC;YAChB,UAAU,EAAE,IAAI;YAChB,IAAI,EAAE,IAAI;SACX,CAAC;;;;QAKF,iBAAY,GAAG;YACb,YAAY,EAAE,EAAE;YAChB,mBAAmB,EAAE,IAAI;SAC1B,CAAC;sBAhCiD,EAAE;2BAKN,CAAC,GAAG,CAAC;oBAKI,KAAK;sBAKlB,KAAK;;IAmBhD,iBAAiB;QACf,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAE9B,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAClB,QACE,wBACE,yBACE,QAAQ,wBACK,oBAAoB,GACd,CACR,EACf;SACH;QAED,OAAO,IAAI;cACP,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,MACtB,oBAAc,KAAK,EAAC,wBAAwB,IAC1C,WAAK,KAAK,EAAC,uBAAuB,IAChC,WAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAI,CACvB,CACO,CAChB,CAAC;cACF,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,MACtB,oBAAc,KAAK,EAAC,wBAAwB,IAC1C,WAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAI,CACd,CAChB,CAAC,CAAC;KACR;IAED,iBAAiB;QACf,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;QAE9C,QACE,sCACE,KAAK,EAAE;gBACL,CAAC,yBAAyB,GAAG,IAAI;gBACjC,CAAC,+BAA+B,GAAG,MAAM;aAC1C,qBACgB,MAAM,CAAC,MAAM,IAC1B,YAAY,GAEf,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,MACvB,oBAAc,KAAK,EAAC,wBAAwB,IAC1C,WAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAI,CACd,CAChB,CAAC,CACe,EACnB;KACH;IAED,MAAM;QACJ,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;QAEjE,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAChD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAChD,MAAM,mBAAmB,GAAG;YAC1B,CAAC,eAAe,GAAG,0BAA0B;YAC7C,IAAI;SACL,CAAC;QAEF,QACE,EAAC,IAAI,qDACH,KAAK,EAAC,iBAAiB,EACvB,KAAK,EAAE;gBACL,gBAAgB,EAAE,GAAG,WAAW,EAAE;gBAClC,qBAAqB,EAAE,GAAG,YAAY,CAAC,YAAY,EAAE;aACtD,IAED,uFACE,KAAK,EAAC,4BAA4B,IAC9B,cAAc,EACd,mBAAmB,GAEtB,cAAc,CACE,EAElB,cAAc,CACV,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/elementor/core/images-carousel/images-carousel.scss?tag=tp-images-carousel&encapsulation=scoped","src/components/elementor/core/images-carousel/images-carousel.tsx"],"sourcesContent":["@import '../../../../styles/templarios.abstracts';\r\n\r\n:host {\r\n  --width: 100%;\r\n\r\n  width: var(--width);\r\n  overflow: hidden;\r\n}\r\n\r\n.images-carousel {\r\n  &__container {\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n\r\n    &::part(button-next),\r\n    &::part(button-prev) {\r\n      width: 48px;\r\n      height: 48px;\r\n      padding: 16px;\r\n      box-sizing: border-box;\r\n      border-radius: 50%;\r\n      color: var(--tp-color-neutral-10) !important;\r\n      background: rgba(var(--tp-color-neutral-2-rgb), 10%) !important;\r\n      transition:\r\n        background 300ms ease-in-out,\r\n        transform 300ms ease-in-out;\r\n\r\n      &:hover {\r\n        background: rgba(var(--tp-color-neutral-2-rgb), 30%) !important;\r\n      }\r\n\r\n      &:active {\r\n        transform: scale(0.75);\r\n      }\r\n\r\n      @include breakpoint-down('md') {\r\n        width: 40px;\r\n        height: 40px;\r\n        padding: 12px;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__slide {\r\n    position: relative;\r\n    height: 0;\r\n    padding-top: calc(var(--aspect-ratio) * 100%);\r\n\r\n    .swiper-zoom-container {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n\r\n    img {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n\r\n  &__thumbs {\r\n    margin-top: 12px;\r\n    visibility: hidden;\r\n    position: absolute;\r\n    left: -9999px;\r\n\r\n    &--show {\r\n      position: static;\r\n      visibility: initial;\r\n    }\r\n  }\r\n\r\n  &__thumb {\r\n    display: flex;\r\n    max-width: 120px;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n    filter: grayscale(100%);\r\n    transition: 300ms filter ease-in-out;\r\n\r\n    img {\r\n      transition: 300ms transform ease-in-out;\r\n    }\r\n\r\n    &.swiper-slide-thumb-active {\r\n      filter: grayscale(0%);\r\n    }\r\n\r\n    &:hover {\r\n      img {\r\n        transform: scale(1.1);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, Host, Prop, h } from '@stencil/core';\r\nimport { CarouselImage } from './utils/images-carousel.type';\r\n\r\n@Component({\r\n  tag: 'tp-images-carousel',\r\n  styleUrl: 'images-carousel.scss',\r\n  scoped: true,\r\n})\r\nexport class TpImagesCarousel {\r\n  /**\r\n   * Os objetos com as imagens a serem mostradas no carrossel.\r\n   */\r\n  @Prop({ reflect: true }) images: CarouselImage[] = [];\r\n\r\n  /**\r\n   * As proporções do carrossel no formato h / w (height to width).\r\n   */\r\n  @Prop({ reflect: true }) aspectRatio: number = 1 / 1;\r\n\r\n  /**\r\n   * Se as images terão ou não o recurso de zoom.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) zoom: boolean = false;\r\n\r\n  /**\r\n   * Se o carrossel terá ou não o recurso de thumbs.\r\n   */\r\n  @Prop({ reflect: true }) thumbs: boolean = false;\r\n\r\n  /**\r\n   * Parâmetros de configuração do carrossel.\r\n   */\r\n  carouselParams = {\r\n    slidesPerView: 1,\r\n    navigation: true,\r\n    loop: true,\r\n  };\r\n\r\n  /**\r\n   * Parâmetros de configuração das thumbs.\r\n   */\r\n  thumbsParams = {\r\n    spaceBetween: 12,\r\n    watchSlidesProgress: true,\r\n  };\r\n\r\n  getCarouselImages() {\r\n    const { images, zoom } = this;\r\n\r\n    if (!images.length) {\r\n      return (\r\n        <swiper-slide>\r\n          <ion-skeleton-text\r\n            animated\r\n            tp-component=\"tp-images-carousel\"\r\n          ></ion-skeleton-text>\r\n        </swiper-slide>\r\n      );\r\n    }\r\n\r\n    return zoom\r\n      ? images.map(({ src, alt }) => (\r\n          <swiper-slide class=\"images-carousel__slide\">\r\n            <div class=\"swiper-zoom-container\">\r\n              <img src={src} alt={alt} />\r\n            </div>\r\n          </swiper-slide>\r\n        ))\r\n      : images.map(({ src, alt }) => (\r\n          <swiper-slide class=\"images-carousel__slide\">\r\n            <img src={src} alt={alt} />\r\n          </swiper-slide>\r\n        ));\r\n  }\r\n\r\n  getCarouselThumbs() {\r\n    const { images, thumbs, thumbsParams } = this;\r\n\r\n    return (\r\n      <swiper-container\r\n        class={{\r\n          ['images-carousel__thumbs']: true,\r\n          ['images-carousel__thumbs--show']: thumbs,\r\n        }}\r\n        slides-per-view={images.length}\r\n        {...thumbsParams}\r\n      >\r\n        {images.map(({ src, alt }) => (\r\n          <swiper-slide class=\"images-carousel__thumb\">\r\n            <img src={src} alt={alt} />\r\n          </swiper-slide>\r\n        ))}\r\n      </swiper-container>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { aspectRatio, zoom, carouselParams, thumbsParams } = this;\r\n\r\n    const carouselImages = this.getCarouselImages();\r\n    const carouselThumbs = this.getCarouselThumbs();\r\n    const extraCarouselParams = {\r\n      ['thumbs-swiper']: '.images-carousel__thumbs',\r\n      zoom,\r\n    };\r\n\r\n    return (\r\n      <Host\r\n        class=\"images-carousel\"\r\n        style={{\r\n          '--aspect-ratio': `${aspectRatio}`,\r\n          '--thumbs-margin-top': `${thumbsParams.spaceBetween}`,\r\n        }}\r\n      >\r\n        <swiper-container\r\n          class=\"images-carousel__container\"\r\n          {...carouselParams}\r\n          {...extraCarouselParams}\r\n        >\r\n          {carouselImages}\r\n        </swiper-container>\r\n\r\n        {carouselThumbs}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}