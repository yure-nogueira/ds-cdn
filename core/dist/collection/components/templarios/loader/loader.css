:host(:not(.tp-loader--secondary)) {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: auto;
  height: 100%;
  min-height: 100%;
}
:host(:not(.tp-loader--secondary)) .loader-container {
  display: block;
  width: 94px;
  height: 94px;
}
:host(:not(.tp-loader--secondary)) [tp-loader-circle],
:host(:not(.tp-loader--secondary)) [tp-loader-polyline],
:host(:not(.tp-loader--secondary)) [tp-loader-line] {
  fill: none;
  stroke: var(--tp-color-neutral-10);
  stroke-width: 6;
  stroke-miterlimit: 10;
}
:host(:not(.tp-loader--secondary)) [tp-loader-rect] {
  fill: var(--tp-color-neutral-10);
}
:host(:not(.tp-loader--secondary)) [tp-loader-circle] {
  transform-origin: 50px 50px;
  animation: loadingcircle 1s linear infinite alternate, rotate 2s linear infinite;
  stroke-dasharray: 300;
  stroke-dashoffset: 300;
}
:host(:not(.tp-loader--secondary)) [tp-loader-line] {
  animation: loadingline 1s cubic-bezier(0.83, 0, 0.17, 1) infinite alternate;
  stroke-dasharray: 25;
  stroke-dashoffset: 25;
}
:host(:not(.tp-loader--secondary)) [tp-loader-line]:nth-of-type(2) {
  animation-delay: 0.1s;
}
:host(:not(.tp-loader--secondary)) [tp-loader-line]:nth-of-type(3) {
  animation-delay: 0.2s;
}
:host(:not(.tp-loader--secondary)) [tp-loader-line]:nth-of-type(4) {
  animation-delay: 0.3s;
}
:host(:not(.tp-loader--secondary)) [tp-loader-line]:nth-of-type(5) {
  animation-delay: 0.4s;
}
:host(:not(.tp-loader--secondary)) [tp-loader-line]:nth-of-type(6) {
  animation-delay: 0.5s;
}
:host(:not(.tp-loader--secondary)) [tp-loader-line]:nth-of-type(7) {
  animation-delay: 0.6s;
}
:host(:not(.tp-loader--secondary)) [tp-loader-line]:nth-of-type(8) {
  animation-delay: 0.7s;
}
:host(:not(.tp-loader--secondary)) [tp-loader-polyline] {
  animation: loadingpolyline 1s cubic-bezier(0.83, 0, 0.17, 1) infinite alternate;
  stroke-dasharray: 50;
  stroke-dashoffset: 50;
}
:host(:not(.tp-loader--secondary)) [tp-loader-polyline]:nth-of-type(2) {
  animation-delay: 0.2s;
}
:host(:not(.tp-loader--secondary)) [tp-loader-polyline]:nth-of-type(3) {
  animation-delay: 0.4s;
}
:host(:not(.tp-loader--secondary)) [tp-loader-polyline]:nth-of-type(4) {
  animation-delay: 0.6s;
}
@keyframes loadingline {
  0% {
    stroke-dashoffset: 25;
  }
  50% {
    stroke-dashoffset: 0;
  }
  100% {
    stroke-dashoffset: 0;
  }
}
@keyframes loadingpolyline {
  0% {
    stroke-dashoffset: 50;
  }
  50% {
    stroke-dashoffset: 0;
  }
  100% {
    stroke-dashoffset: 0;
  }
}
@keyframes loadingcircle {
  to {
    stroke-dashoffset: 0;
  }
}
@keyframes rotate {
  to {
    transform: rotate(1turn);
  }
}

:host(.tp-loader--secondary) {
  position: relative;
  display: inline-block;
  width: 24px;
  height: 24px;
}
:host(.tp-loader--secondary) div {
  transform-origin: 12px 12px;
  animation: loader-spinner 0.8s linear infinite;
}
:host(.tp-loader--secondary) div::after {
  position: absolute;
  top: 1px;
  left: 11px;
  display: block;
  width: 2px;
  height: 6px;
  background: var(--tp-color-neutral-10);
  border-radius: 10px;
  content: " ";
}
:host(.tp-loader--secondary) div:nth-child(1) {
  transform: rotate(0deg);
  animation-delay: -0.7s;
}
:host(.tp-loader--secondary) div:nth-child(2) {
  transform: rotate(45deg);
  animation-delay: -0.6s;
}
:host(.tp-loader--secondary) div:nth-child(3) {
  transform: rotate(90deg);
  animation-delay: -0.5s;
}
:host(.tp-loader--secondary) div:nth-child(4) {
  transform: rotate(135deg);
  animation-delay: -0.4s;
}
:host(.tp-loader--secondary) div:nth-child(5) {
  transform: rotate(180deg);
  animation-delay: -0.3s;
}
:host(.tp-loader--secondary) div:nth-child(6) {
  transform: rotate(225deg);
  animation-delay: -0.2s;
}
:host(.tp-loader--secondary) div:nth-child(7) {
  transform: rotate(270deg);
  animation-delay: -0.1s;
}
:host(.tp-loader--secondary) div:nth-child(8) {
  transform: rotate(315deg);
  animation-delay: 0s;
}
@keyframes loader-spinner {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0.3;
  }
}

:host(.tp-loader--fixed) {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
}

:host(.tp-color) [tp-loader-circle],
:host(.tp-color) [tp-loader-polyline],
:host(.tp-color) [tp-loader-line] {
  stroke: var(--tp-color-base);
}
:host(.tp-color) [tp-loader-rect] {
  fill: var(--tp-color-base);
}
:host(.tp-color) div::after {
  background: var(--tp-color-base);
}