{"version":3,"file":"horizontal-chart-bar.js","sourceRoot":"","sources":["../../../../src/components/templarios/horizontal-chart-bar/horizontal-chart-bar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAU7E,MAAM,OAAO,oBAAoB;;;;qBAcE,CAAC;wBAKE,GAAG;uBAKJ,KAAK;;;IAOxC,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAChE,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,QAAQ,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;QAExE,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CACxB,WAAK,KAAK,EAAC,oCAAoC;YAC7C,yBACE,KAAK,EAAC,yEAAyE,EAC/E,QAAQ,SACW;YAEpB,CAAC,OAAO,IAAI,CACX,yBACE,KAAK,EAAC,6FAA6F,EACnG,QAAQ,SACW,CACtB,CACG,CACP,CAAC,CAAC,CAAC,CACF,WAAK,KAAK,EAAC,oCAAoC;YAC7C,WAAK,KAAK,EAAC,gCAAgC;gBACzC,WAAK,KAAK,EAAC,mCAAmC,GAAO,CACjD;YAEL,CAAC,OAAO,IAAI,CACX,WAAK,KAAK,EAAC,0CAA0C;gBACnD,eAAa,CACT,CACP,CACG,CACP,CAAC;QAEF,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,yBAAyB,EAAE,IAAI;gBAC/B,gCAAgC,EAAE,UAAU,IAAI,GAAG;gBACnD,CAAC,4BAA4B,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;aACpD,CAAC,EACF,KAAK,EAAE,EAAE,sBAAsB,EAAE,GAAG,UAAU,GAAG,EAAE,IAElD,OAAO,CACH,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Prop, h } from '@stencil/core';\nimport { createColorClasses } from '../../../utils/functions/color.function';\nimport type { TpColor } from '../../../utils/types/color.type';\nimport { TpHorizontalChartBarSize } from './utils/horizontal-chart-bar.enum';\n\n@Component({\n  tag: 'tp-horizontal-chart-bar',\n  styleUrl: 'horizontal-chart-bar.scss',\n  assetsDirs: ['assets'],\n  shadow: true,\n})\nexport class TpHorizontalChartBar {\n  /**\n   * Define a variação de cor do componente.\n   */\n  @Prop({ reflect: true }) color?: TpColor;\n\n  /**\n   * Define a variação de tamanho do componente.\n   */\n  @Prop({ reflect: true }) size?: TpHorizontalChartBarSize;\n\n  /**\n   * Define o valor da barra de progresso.\n   */\n  @Prop({ reflect: true }) value = 0;\n\n  /**\n   * Define o valor máximo da barra de progresso.\n   */\n  @Prop({ reflect: true }) maxCount = 100;\n\n  /**\n   * Define se um slot será disponibilizado para receber o label do chart.\n   */\n  @Prop({ reflect: true }) noLabel = false;\n\n  /**\n   * Define o estado de carregamento do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\n\n  render() {\n    const { color, size, value, maxCount, noLabel, loading } = this;\n    const percentage = Math.min(Math.max(0, (value / maxCount) * 100), 100);\n\n    const content = loading ? (\n      <div class=\"tp-horizontal-chart-bar__container\">\n        <ion-skeleton-text\n          class=\"tp-horizontal-chart-bar__track tp-horizontal-chart-bar__track--skeleton\"\n          animated\n        ></ion-skeleton-text>\n\n        {!noLabel && (\n          <ion-skeleton-text\n            class=\"tp-horizontal-chart-bar__label-container tp-horizontal-chart-bar__label-container--skeleton\"\n            animated\n          ></ion-skeleton-text>\n        )}\n      </div>\n    ) : (\n      <div class=\"tp-horizontal-chart-bar__container\">\n        <div class=\"tp-horizontal-chart-bar__track\">\n          <div class=\"tp-horizontal-chart-bar__progress\"></div>\n        </div>\n\n        {!noLabel && (\n          <div class=\"tp-horizontal-chart-bar__label-container\">\n            <slot></slot>\n          </div>\n        )}\n      </div>\n    );\n\n    return (\n      <Host\n        class={createColorClasses(color, {\n          'tp-horizontal-chart-bar': true,\n          'tp-horizontal-chart-bar--spill': percentage >= 100,\n          [`tp-horizontal-chart-bar--${size}`]: Boolean(size),\n        })}\n        style={{ '--tp-fill-percentage': `${percentage}%` }}\n      >\n        {content}\n      </Host>\n    );\n  }\n}\n"]}