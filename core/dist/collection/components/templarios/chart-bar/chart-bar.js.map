{"version":3,"file":"chart-bar.js","sourceRoot":"","sources":["../../../../src/components/templarios/chart-bar/chart-bar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAS7E,MAAM,OAAO,UAAU;;;qBASY,CAAC;sBAKA,EAAE;qBAKH,EAAE;uBAKA,KAAK;;;IAOxC,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAE/D,MAAM,UAAU,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QAEtE,IAAI,OAAO,CAAC;QAEZ,IAAI,OAAO,EAAE;YACX,OAAO,GAAG,CACR,WAAK,KAAK,EAAC,yBAAyB;gBACjC,CAAC,OAAO,IAAI,CACX,yBACE,KAAK,EAAC,8BAA8B,EACpC,QAAQ,SACW,CACtB;gBACD,yBACE,KAAK,EAAC,wBAAwB,EAC9B,QAAQ,SACW,CACjB,CACP,CAAC;SACH;aAAM;YACL,OAAO,GAAG,CACR,WAAK,KAAK,EAAC,yBAAyB;gBACjC,CAAC,OAAO,IAAI,CACX,WAAK,KAAK,EAAC,qBAAqB;oBAC9B,eAAa,CACT,CACP;gBAED,WAAK,KAAK,EAAC,wBAAwB,GAAO,CACtC,CACP,CAAC;SACH;QAED,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,cAAc,EAAE,IAAI;gBACpB,wBAAwB,EAAE,OAAO;gBACjC,uBAAuB,EAAE,OAAO;aACjC,CAAC,EACF,KAAK,EAAE;gBACL,SAAS,EAAE,GAAG,UAAU,EAAE;gBAC1B,UAAU,EAAE,GAAG,MAAM,EAAE;gBACvB,SAAS,EAAE,GAAG,KAAK,EAAE;aACtB,IAEA,OAAO,CACH,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Prop, h } from '@stencil/core';\nimport { createColorClasses } from '../../../utils/functions/color.function';\nimport type { TpColor } from '../../../utils/types/color.type';\n\n@Component({\n  tag: 'tp-chart-bar',\n  styleUrl: 'chart-bar.scss',\n  assetsDirs: ['assets'],\n  shadow: true,\n})\nexport class TpChartBar {\n  /**\n   * Define a variação de cor do componente.\n   */\n  @Prop({ reflect: true }) color?: TpColor;\n\n  /**\n   * Define o valor do preenchimento do componente.\n   */\n  @Prop({ reflect: true }) value = 0;\n\n  /**\n   * Define a altura do componente.\n   */\n  @Prop({ reflect: true }) height = 50;\n\n  /**\n   * Define a largura do componente.\n   */\n  @Prop({ reflect: true }) width = 32;\n\n  /**\n   * Define se o componente irá apresentar rótulo ou não.\n   */\n  @Prop({ reflect: true }) noLabel = false;\n\n  /**\n   * Define o estado de carregamento do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\n\n  render() {\n    const { color, value, height, width, noLabel, loading } = this;\n\n    const percentage = (height * Math.min(Math.max(0, value), 100)) / 100;\n\n    let content;\n\n    if (loading) {\n      content = (\n        <div class=\"tp-chart-bar__container\">\n          {!noLabel && (\n            <ion-skeleton-text\n              class=\"tp-chart-bar__label-skeleton\"\n              animated\n            ></ion-skeleton-text>\n          )}\n          <ion-skeleton-text\n            class=\"tp-chart-bar__skeleton\"\n            animated\n          ></ion-skeleton-text>\n        </div>\n      );\n    } else {\n      content = (\n        <div class=\"tp-chart-bar__container\">\n          {!noLabel && (\n            <div class=\"tp-chart-bar__label\">\n              <slot></slot>\n            </div>\n          )}\n\n          <div class=\"tp-chart-bar__progress\"></div>\n        </div>\n      );\n    }\n\n    return (\n      <Host\n        class={createColorClasses(color, {\n          'tp-chart-bar': true,\n          'tp-chart-bar--no-label': noLabel,\n          'tp-chart-bar--loading': loading,\n        })}\n        style={{\n          '--value': `${percentage}`,\n          '--height': `${height}`,\n          '--width': `${width}`,\n        }}\n      >\n        {content}\n      </Host>\n    );\n  }\n}\n"]}