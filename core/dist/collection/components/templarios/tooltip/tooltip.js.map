{"version":3,"file":"tooltip.js","sourceRoot":"","sources":["../../../../src/components/templarios/tooltip/tooltip.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACjE,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAQ7E,MAAM,OAAO,SAAS;;;;;;yBAwBgC,IAAI;;;IAOxD;;OAEG;IAEH,KAAK,CAAC,MAAM,CAAC,KAAW;QACtB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,eAAe,EAAE,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;SAClC;IACH,CAAC;IAED;;OAEG;IAEH,KAAK,CAAC,aAAa,CAAC,KAAW;QAC7B,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,eAAe,EAAE,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;SAClC;IACH,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEhE,IAAI,QAAQ,CAAC;QAEb,IAAI,OAAO,EAAE;YACX,QAAQ,GAAG,CACT,WAAK,KAAK,EAAC,8BAA8B;gBACvC,yBACE,KAAK,EAAC,sBAAsB,EAC5B,QAAQ,SACW,CACjB,CACP,CAAC;SACH;QAED,OAAO,CACL,EAAC,IAAI,IACH,YAAY,EAAE,CAAC,KAAU,EAAE,EAAE;gBAC3B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC,EACD,YAAY,EAAE,CAAC,KAAU,EAAE,EAAE;gBAC3B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC,EACD,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,YAAY,EAAE,IAAI;gBAClB,CAAC,eAAe,SAAS,EAAE,CAAC,EAAE,SAAS,KAAK,SAAS;gBACrD,CAAC,eAAe,QAAQ,EAAE,CAAC,EAAE,QAAQ,KAAK,SAAS;gBACnD,uBAAuB,EAAE,SAAS;gBAClC,qBAAqB,EAAE,OAAO;aAC/B,CAAC;YAEF,WACE,KAAK,EAAC,+BAA+B,EACrC,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE;oBACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACrB,CAAC;gBAED,YAAM,IAAI,EAAC,SAAS,GAAQ,CACxB;YAEN,WAAK,KAAK,EAAC,qBAAqB;gBAC9B,eAAa,CACT;YAEL,QAAQ,CACJ,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Host, Method, Prop } from '@stencil/core';\nimport { createColorClasses } from '../../../utils/functions/color.function';\nimport type { TpColor } from '../../../utils/types/color.type';\n\n@Component({\n  tag: 'tp-tooltip',\n  styleUrl: 'tooltip.scss',\n  scoped: true,\n})\nexport class TpTooltip {\n  /**\n   * todo\n   */\n  @Prop({ reflect: true }) color?: TpColor;\n\n  /**\n   * Habilita o toggle no hover.\n   */\n  @Prop() hover?: boolean;\n\n  /**\n   * Define posicionamento em relação ao componente parent.\n   */\n  @Prop({ reflect: true }) placement?: 'top' | 'bottom' | 'left' | 'right';\n\n  /**\n   * Define posicionamento horizontal do componente.\n   */\n  @Prop({ reflect: true }) position?: 'start' | 'center' | 'end';\n\n  /**\n   * Define a variação de estado do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) collapsed = true;\n\n  /**\n   * Define o estado de carregamento do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\n\n  /**\n   * todo\n   */\n  @Method()\n  async toggle(event?: any) {\n    if (!this.hover) {\n      event?.stopPropagation();\n      this.collapsed = !this.collapsed;\n    }\n  }\n\n  /**\n   * todo\n   */\n  @Method()\n  async toggleOnHover(event?: any) {\n    if (this.hover) {\n      event?.stopPropagation();\n      this.collapsed = !this.collapsed;\n    }\n  }\n\n  render() {\n    const { color, placement, position, collapsed, loading } = this;\n\n    let skeleton;\n\n    if (loading) {\n      skeleton = (\n        <div class=\"tp-tooltip__content-skeleton\">\n          <ion-skeleton-text\n            class=\"tp-tooltip__skeleton\"\n            animated\n          ></ion-skeleton-text>\n        </div>\n      );\n    }\n\n    return (\n      <Host\n        onMouseenter={(event: any) => {\n          this.toggleOnHover(event);\n        }}\n        onMouseleave={(event: any) => {\n          this.toggleOnHover(event);\n        }}\n        class={createColorClasses(color, {\n          'tp-tooltip': true,\n          [`tp-tooltip--${placement}`]: placement !== undefined,\n          [`tp-tooltip--${position}`]: position !== undefined,\n          'tp-tooltip--collapsed': collapsed,\n          'tp-tooltip--loading': loading,\n        })}\n      >\n        <div\n          class=\"tp-tooltip__trigger-container\"\n          onClick={(event: any) => {\n            this.toggle(event);\n          }}\n        >\n          <slot name=\"trigger\"></slot>\n        </div>\n\n        <div class=\"tp-tooltip__content\">\n          <slot></slot>\n        </div>\n\n        {skeleton}\n      </Host>\n    );\n  }\n}\n"]}