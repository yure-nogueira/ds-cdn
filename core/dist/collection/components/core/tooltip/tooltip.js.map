{"version":3,"file":"tooltip.js","sourceRoot":"","sources":["../../../../src/components/core/tooltip/tooltip.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACjE,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAQ7E,MAAM,OAAO,SAAS;;;;;;yBAwBgC,IAAI;;;IAOxD;;OAEG;IAEH,KAAK,CAAC,MAAM,CAAC,KAAW;QACtB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,eAAe,EAAE,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACnC,CAAC;IACH,CAAC;IAED;;OAEG;IAEH,KAAK,CAAC,aAAa,CAAC,KAAW;QAC7B,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,eAAe,EAAE,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACnC,CAAC;IACH,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEhE,IAAI,QAAQ,CAAC;QAEb,IAAI,OAAO,EAAE,CAAC;YACZ,QAAQ,GAAG,CACT,4DAAK,KAAK,EAAC,8BAA8B;gBACvC,0EACE,KAAK,EAAC,sBAAsB,EAC5B,QAAQ,SACW,CACjB,CACP,CAAC;QACJ,CAAC;QAED,OAAO,CACL,EAAC,IAAI,qDACH,YAAY,EAAE,CAAC,KAAU,EAAE,EAAE;gBAC3B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC,EACD,YAAY,EAAE,CAAC,KAAU,EAAE,EAAE;gBAC3B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC,EACD,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,YAAY,EAAE,IAAI;gBAClB,CAAC,eAAe,SAAS,EAAE,CAAC,EAAE,SAAS,KAAK,SAAS;gBACrD,CAAC,eAAe,QAAQ,EAAE,CAAC,EAAE,QAAQ,KAAK,SAAS;gBACnD,uBAAuB,EAAE,SAAS;gBAClC,qBAAqB,EAAE,OAAO;aAC/B,CAAC;YAEF,4DACE,KAAK,EAAC,+BAA+B,EACrC,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE;oBACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACrB,CAAC;gBAED,6DAAM,IAAI,EAAC,SAAS,GAAQ,CACxB;YAEN,4DAAK,KAAK,EAAC,qBAAqB;gBAC9B,8DAAa,CACT;YAEL,QAAQ,CACJ,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Host, Method, Prop } from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\n\r\n@Component({\r\n  tag: 'tp-tooltip',\r\n  styleUrl: 'tooltip.scss',\r\n  scoped: true,\r\n})\r\nexport class TpTooltip {\r\n  /**\r\n   * todo\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * Habilita o toggle no hover.\r\n   */\r\n  @Prop() hover?: boolean;\r\n\r\n  /**\r\n   * Define posicionamento em relação ao componente parent.\r\n   */\r\n  @Prop({ reflect: true }) placement?: 'top' | 'bottom' | 'left' | 'right';\r\n\r\n  /**\r\n   * Define posicionamento horizontal do componente.\r\n   */\r\n  @Prop({ reflect: true }) position?: 'start' | 'center' | 'end';\r\n\r\n  /**\r\n   * Define a variação de estado do componente.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) collapsed = true;\r\n\r\n  /**\r\n   * Define o estado de carregamento do componente.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Method()\r\n  async toggle(event?: any) {\r\n    if (!this.hover) {\r\n      event?.stopPropagation();\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * todo\r\n   */\r\n  @Method()\r\n  async toggleOnHover(event?: any) {\r\n    if (this.hover) {\r\n      event?.stopPropagation();\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { color, placement, position, collapsed, loading } = this;\r\n\r\n    let skeleton;\r\n\r\n    if (loading) {\r\n      skeleton = (\r\n        <div class=\"tp-tooltip__content-skeleton\">\r\n          <ion-skeleton-text\r\n            class=\"tp-tooltip__skeleton\"\r\n            animated\r\n          ></ion-skeleton-text>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Host\r\n        onMouseenter={(event: any) => {\r\n          this.toggleOnHover(event);\r\n        }}\r\n        onMouseleave={(event: any) => {\r\n          this.toggleOnHover(event);\r\n        }}\r\n        class={createColorClasses(color, {\r\n          'tp-tooltip': true,\r\n          [`tp-tooltip--${placement}`]: placement !== undefined,\r\n          [`tp-tooltip--${position}`]: position !== undefined,\r\n          'tp-tooltip--collapsed': collapsed,\r\n          'tp-tooltip--loading': loading,\r\n        })}\r\n      >\r\n        <div\r\n          class=\"tp-tooltip__trigger-container\"\r\n          onClick={(event: any) => {\r\n            this.toggle(event);\r\n          }}\r\n        >\r\n          <slot name=\"trigger\"></slot>\r\n        </div>\r\n\r\n        <div class=\"tp-tooltip__content\">\r\n          <slot></slot>\r\n        </div>\r\n\r\n        {skeleton}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}