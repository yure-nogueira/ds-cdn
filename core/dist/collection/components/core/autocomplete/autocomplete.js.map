{"version":3,"file":"autocomplete.js","sourceRoot":"","sources":["../../../../src/components/core/autocomplete/autocomplete.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,OAAO,EACP,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,KAAK,EACL,CAAC,GACF,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAS7E,MAAM,OAAO,cAAc;;;sBAUS,KAAK;2BAMA,KAAK;oBAK5B,KAAK;;;IAYrB;;OAEG;IAEH,mBAAmB,CAAC,KAAiB;QACnC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAc,CAAC;QAEpC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAChC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QACpB,CAAC;IACH,CAAC;IAGD,WAAW,CAAC,KAA+B;QACzC,IAAI,CAAC,UAAU,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvC,CAAC;IAGD,WAAW;QACT,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAErC,OAAO,CACL,EAAC,IAAI,qDACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,iBAAiB,EAAE,IAAI;gBACvB,gCAAgC,EAAE,MAAM,IAAI,CAAC,IAAI;gBACjD,gCAAgC,EAAE,CAAC,MAAM,IAAI,IAAI;aAClD,CAAC;YAEF,8DAAa,CACR,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\r\n  Component,\r\n  Element,\r\n  Host,\r\n  Listen,\r\n  Prop,\r\n  State,\r\n  h,\r\n} from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport { TpColor } from '../../../utils/types/color.type';\r\nimport { IonInputCustomEvent } from '@ionic/core';\r\n\r\n@Component({\r\n  tag: 'tp-autocomplete',\r\n  styleUrl: 'autocomplete.scss',\r\n  scoped: true,\r\n})\r\nexport class TpAutocomplete {\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color: TpColor;\r\n\r\n  /**\r\n   * Define se o componente deve ou não bloquear a renderização\r\n   * do dropdown.\r\n   */\r\n  @Prop({ reflect: true }) locked = false;\r\n\r\n  /**\r\n   * Define se o componente deve ou não renderizar o dropdown\r\n   * quando o slot que recebe um input ganha foco.\r\n   */\r\n  @Prop({ reflect: true }) openOnFocus = false;\r\n\r\n  /**\r\n   * O estado do dropdown (aberto ou fechado).\r\n   */\r\n  @State() open = false;\r\n\r\n  /**\r\n   * O valor recebido pelo input renderizado no slot.\r\n   */\r\n  @State() inputValue: string;\r\n\r\n  /**\r\n   * Referência ao host.\r\n   */\r\n  @Element() host: HTMLElement;\r\n\r\n  /**\r\n   * Event listeners.\r\n   */\r\n  @Listen('click', { target: 'body' })\r\n  closeOnOutsideClick(event: MouseEvent) {\r\n    const target = event.target as Node;\r\n\r\n    if (!this.host.contains(target)) {\r\n      this.open = false;\r\n    }\r\n  }\r\n\r\n  @Listen('ionInput')\r\n  handleInput(event: IonInputCustomEvent<any>) {\r\n    this.inputValue = `${event.target.value}`;\r\n    this.open = Boolean(this.inputValue);\r\n  }\r\n\r\n  @Listen('ionFocus')\r\n  handleFocus() {\r\n    this.open = this.openOnFocus || Boolean(this.inputValue);\r\n  }\r\n\r\n  render() {\r\n    const { color, open, locked } = this;\r\n\r\n    return (\r\n      <Host\r\n        class={createColorClasses(color, {\r\n          'tp-autocomplete': true,\r\n          'tp-autocomplete--dropdown-hide': locked || !open,\r\n          'tp-autocomplete--dropdown-show': !locked && open,\r\n        })}\r\n      >\r\n        <slot></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}