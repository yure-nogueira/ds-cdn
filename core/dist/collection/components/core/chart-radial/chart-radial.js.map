{"version":3,"file":"chart-radial.js","sourceRoot":"","sources":["../../../../src/components/core/chart-radial/chart-radial.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACzE,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAW7E,MAAM,OAAO,aAAa;;;;qBAgB8B,EAAE;;IAGxD,iBAAiB;QACf,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CACtD,4BAA4B,CAC7B,CAAC;QAEF,UAAU,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC9B,MAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACnC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,kBAAkB,IAAI,CAAC,KAAK,GAAG,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAEpC,MAAM,cAAc,GAAG;YACrB,KAAK,EAAE,CAAC;YACR,OAAO,EAAE,EAAc;SACxB,CAAC;QAEF,KAAK,CAAC,OAAO,CAAC,CAAC,IAAuB,EAAE,EAAE;YACxC,cAAc,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC;YACtC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,MAAM,aAAa,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAE/C,OAAO,CACL,EAAC,IAAI,qDACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,iBAAiB,EAAE,IAAI;gBACvB,CAAC,oBAAoB,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;aAC5C,CAAC;YAEF,4DAAK,KAAK,EAAC,4BAA4B,EAAC,OAAO,EAAC,WAAW;gBACzD,+DAAQ,KAAK,EAAC,wBAAwB,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,GAAG;gBAC/D,aAAa,CAAC,GAAG,CAAC,CAAC,IAAuB,EAAE,KAAa,EAAE,EAAE;oBAC5D,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;oBAC/C,MAAM,kBAAkB,GACtB,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC;wBAC9D,GAAG,CAAC;oBAEN,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;wBAClC,OAAO,CACL,cACE,EAAE,EAAC,IAAI,EACP,EAAE,EAAC,IAAI,EACP,CAAC,EAAC,IAAI,gBACM,aAAa,EACzB,KAAK,EAAC,2BAA2B,EACjC,KAAK,EAAE;gCACL,0BAA0B,EAAE,GAAG,kBAAkB,EAAE;6BACpD,GACD,CACH,CAAC;oBACJ,CAAC;gBACH,CAAC,CAAC,CACE;YAEN,4DAAK,KAAK,EAAC,iCAAiC;gBAC1C,6DAAM,IAAI,EAAC,OAAO,GAAQ;gBAC1B,6DAAM,IAAI,EAAC,UAAU,GAAQ,CACzB,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Host, Prop, Watch, h } from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\nimport { TpChartRadialSize } from './utils/chart-radial.enum';\r\nimport { TpChartRadialItem } from './utils/chart-radial.type';\r\n\r\n@Component({\r\n  tag: 'tp-chart-radial',\r\n  styleUrl: 'chart-radial.scss',\r\n  assetsDirs: ['assets'],\r\n  shadow: true,\r\n})\r\nexport class TpChartRadial {\r\n  @Element() host: HTMLElement;\r\n\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * Define o tamanho do componente.\r\n   */\r\n  @Prop({ reflect: true }) size?: TpChartRadialSize;\r\n\r\n  /**\r\n   * Define os valores representados pelo componente.\r\n   */\r\n  @Prop({ reflect: true }) items: TpChartRadialItem[] = [];\r\n\r\n  @Watch('items')\r\n  updateTrackColors() {\r\n    const progresses = this.host.shadowRoot.querySelectorAll<HTMLElement>(\r\n      '.tp-chart-radial__progress',\r\n    );\r\n\r\n    progresses.forEach((progress) => {\r\n      const itemIndex = Number(progress.dataset['index']);\r\n      const item = this.items[itemIndex];\r\n      progress.style.stroke = `var(--tp-color-${item.color})`;\r\n    });\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.updateTrackColors();\r\n  }\r\n\r\n  render() {\r\n    const { color, size, items } = this;\r\n\r\n    const progressesData = {\r\n      total: 0,\r\n      singles: [] as number[],\r\n    };\r\n\r\n    items.forEach((item: TpChartRadialItem) => {\r\n      progressesData.total += item.quantity;\r\n      progressesData.singles.push(progressesData.total);\r\n    });\r\n\r\n    const reversedItems = items.slice(0).reverse();\r\n\r\n    return (\r\n      <Host\r\n        class={createColorClasses(color, {\r\n          'tp-chart-radial': true,\r\n          [`tp-chart-radial--${size}`]: Boolean(size),\r\n        })}\r\n      >\r\n        <svg class=\"tp-chart-radial__container\" viewBox=\"0 0 36 36\">\r\n          <circle class=\"tp-chart-radial__track\" cx=\"18\" cy=\"18\" r=\"16\" />\r\n          {reversedItems.map((item: TpChartRadialItem, index: number) => {\r\n            const originalIndex = items.length - index - 1;\r\n            const progressPercentage =\r\n              (progressesData.singles[originalIndex] / progressesData.total) *\r\n              100;\r\n\r\n            if (!item.ignore && item.quantity) {\r\n              return (\r\n                <circle\r\n                  cx=\"18\"\r\n                  cy=\"18\"\r\n                  r=\"16\"\r\n                  data-index={originalIndex}\r\n                  class=\"tp-chart-radial__progress\"\r\n                  style={{\r\n                    '--tp-progress-percentage': `${progressPercentage}`,\r\n                  }}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </svg>\r\n\r\n        <div class=\"tp-chart-radial__text-container\">\r\n          <slot name=\"title\"></slot>\r\n          <slot name=\"subtitle\"></slot>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}