{"version":3,"file":"toolbar.stories.js","sourceRoot":"","sources":["../../../../../src/components/core/toolbar/stories/toolbar.stories.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAI3B,MAAM,IAAI,GAAoC;IAC5C,KAAK,EAAE,yBAAyB;IAChC,QAAQ,EAAE,EAAE;IACZ,IAAI,EAAE,EAAE;CACT,CAAC;AAEF,eAAe,IAAI,CAAC;AAIpB,MAAM,CAAC,MAAM,OAAO,GAAU;IAC5B,MAAM,EAAE,CAAC,EAAW,EAAE,EAAE;YAAV,IAAI,cAAT,EAAW,CAAF;QAChB,OAAO,IAAI,CAAA;0BACW,IAAI,CAAC,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+B/B,CAAC;IACJ,CAAC;IACD;;;SAGK;CACN,CAAC","sourcesContent":["import type { Meta, StoryObj } from '@storybook/web-components';\r\nimport { html } from 'lit';\r\nimport { TpToolbar } from '../toolbar';\r\nimport { TpToolbarType } from '../utils/toolbar.type';\r\n\r\nconst meta: Meta<TpToolbar & TpToolbarType> = {\r\n  title: 'components/Core/Toolbar',\r\n  argTypes: {},\r\n  args: {},\r\n};\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<TpToolbar & TpToolbarType>;\r\n\r\nexport const Default: Story = {\r\n  render: ({ ...args }) => {\r\n    return html`\r\n      <tp-toolbar color=${args.color}>\r\n        <ion-button fill=\"clear\" slot=\"start\" size=\"xxs\">\r\n          <ion-icon\r\n            slot=\"icon-only\"\r\n            src=\"./assets/tp-arrow-left-circle.svg\"\r\n          ></ion-icon>\r\n        </ion-button>\r\n\r\n        <ion-button fill=\"clear\" class=\"markup-tollbar-button\" size=\"xs\">\r\n          <ion-icon slot=\"icon-only\" src=\"./assets/tp-edit.svg\"></ion-icon>\r\n        </ion-button>\r\n        <ion-button fill=\"clear\" class=\"markup-tollbar-button\" size=\"xxs\">\r\n          <ion-icon slot=\"icon-only\" src=\"./assets/tp-star.svg\"></ion-icon>\r\n        </ion-button>\r\n        <ion-button fill=\"clear\" class=\"markup-tollbar-button\" size=\"xxs\">\r\n          <ion-icon slot=\"icon-only\" src=\"./assets/tp-eye.svg\"></ion-icon>\r\n        </ion-button>\r\n        <ion-button fill=\"clear\" class=\"markup-tollbar-button\" size=\"xs\">\r\n          <ion-icon\r\n            slot=\"icon-only\"\r\n            src=\"./assets/tp-type-duble.svg\"\r\n          ></ion-icon>\r\n        </ion-button>\r\n\r\n        <ion-button fill=\"clear\" slot=\"end\" size=\"xxs\">\r\n          <ion-icon\r\n            slot=\"icon-only\"\r\n            src=\"./assets/tp-arrow-right-circle.svg\"\r\n          ></ion-icon>\r\n        </ion-button>\r\n      </tp-toolbar>\r\n    `;\r\n  },\r\n  /* play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    expect(canvas.getByText(/tp-tiles/gi)).toBeTruthy();\r\n  }, */\r\n};\r\n"]}