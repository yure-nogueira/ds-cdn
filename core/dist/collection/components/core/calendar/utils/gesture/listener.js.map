{"version":3,"file":"listener.js","sourceRoot":"","sources":["../../../../../../src/components/core/calendar/utils/gesture/listener.ts"],"names":[],"mappings":"AACA,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,EAAO,EACP,SAAiB,EACjB,QAA4C,EAC5C,IAGC,EACa,EAAE;IAChB,4CAA4C;IAC5C,sDAAsD;IACtD,MAAM,YAAY,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO;QACzB,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO;KAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IAEnB,IAAI,GAAW,CAAC;IAChB,IAAI,MAAc,CAAC;IACnB,IAAI,EAAE,CAAC,iCAAiC,CAAC,EAAE,CAAC;QAC1C,GAAG,GAAG,iCAAiC,CAAC;QACxC,MAAM,GAAG,oCAAoC,CAAC;IAChD,CAAC;SAAM,CAAC;QACN,GAAG,GAAG,kBAAkB,CAAC;QACzB,MAAM,GAAG,qBAAqB,CAAC;IACjC,CAAC;IAED,EAAE,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;IAC3C,OAAO,GAAG,EAAE;QACV,EAAE,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;IAChD,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,IAAU,EAAE,EAAE;IACrC,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;QAC5B,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,SAAS,EAAE;gBAChD,GAAG,EAAE,GAAG,EAAE;oBACR,SAAS,GAAG,IAAI,CAAC;gBACnB,CAAC;aACF,CAAC,CAAC;YACH,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,SAAS,GAAG,KAAK,CAAC;QACpB,CAAC;IACH,CAAC;IACD,OAAO,CAAC,CAAC,SAAS,CAAC;AACrB,CAAC,CAAC;AAEF,IAAI,SAA8B,CAAC","sourcesContent":["\r\nexport const addEventListener = (\r\n  el: any,\r\n  eventName: string,\r\n  callback: EventListenerOrEventListenerObject,\r\n  opts: {\r\n    passive?: boolean;\r\n    capture?: boolean\r\n  }\r\n): (() => void) => {\r\n  // use event listener options when supported\r\n  // otherwise it's just a boolean for the \"capture\" arg\r\n  const listenerOpts = supportsPassive(el) ? {\r\n    'capture': !!opts.capture,\r\n    'passive': !!opts.passive,\r\n  } : !!opts.capture;\r\n\r\n  let add: string;\r\n  let remove: string;\r\n  if (el['__zone_symbol__addEventListener']) {\r\n    add = '__zone_symbol__addEventListener';\r\n    remove = '__zone_symbol__removeEventListener';\r\n  } else {\r\n    add = 'addEventListener';\r\n    remove = 'removeEventListener';\r\n  }\r\n\r\n  el[add](eventName, callback, listenerOpts);\r\n  return () => {\r\n    el[remove](eventName, callback, listenerOpts);\r\n  };\r\n};\r\n\r\nconst supportsPassive = (node: Node) => {\r\n  if (_sPassive === undefined) {\r\n    try {\r\n      const opts = Object.defineProperty({}, 'passive', {\r\n        get: () => {\r\n          _sPassive = true;\r\n        }\r\n      });\r\n      node.addEventListener('optsTest', () => { return; }, opts);\r\n    } catch (e) {\r\n      _sPassive = false;\r\n    }\r\n  }\r\n  return !!_sPassive;\r\n};\r\n\r\nlet _sPassive: boolean | undefined;\r\n"]}