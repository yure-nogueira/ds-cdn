{"version":3,"file":"banner.js","sourceRoot":"","sources":["../../../../../src/components/elementor/core/banner/banner.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAEzE,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAOpD,MAAM,OAAO,QAAQ;;yBAIkB,KAAK;yBAMxC,SAAS,CAAC,SAAS,CAAC,IAAI;uBAKP,KAAK;;IASxB,iBAAiB;QACf,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;IAC7B,CAAC;IAED,aAAa;QACX,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAoB,CACtC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EACnC;YACE,IAAI,EAAE,IAAI,CAAC,SAAS;gBAClB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa;gBACvC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa;YAC3B,SAAS,EAAE,GAAG;SACf,CACF,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,mBAAmB,CAAC,OAAoC;QACtD,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAC/C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,OAAO;QACT,CAAC;QAED,IAAI,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzC,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;QAEpC,OAAO,CACL,EAAC,IAAI,qDACH,KAAK,EAAE;gBACL,MAAM,EAAE,IAAI;gBACZ,CAAC,kBAAkB,CAAC,EAAE,OAAO;gBAC7B,CAAC,iBAAiB,SAAS,EAAE,CAAC,EAAE,IAAI;aACrC;YAED,4DAAK,KAAK,EAAC,mBAAmB;gBAC5B,6DAAM,IAAI,EAAC,OAAO,GAAG;gBAErB,4DAAK,KAAK,EAAC,iBAAiB;oBAC1B,6DAAM,IAAI,EAAC,SAAS,GAAQ,CACxB,CACF,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Host, Prop, State, h } from '@stencil/core';\r\nimport { TpBannerAlignment } from './utils/banner.type';\r\nimport { TP_BANNER } from './utils/banner.constant';\r\n\r\n@Component({\r\n  tag: 'tp-banner',\r\n  styleUrl: 'banner.scss',\r\n  scoped: true,\r\n})\r\nexport class TpBanner {\r\n  /**\r\n   * Define se o componente é ou não usado como slide.\r\n   */\r\n  @Prop({ reflect: true }) slideMode = false;\r\n\r\n  /**\r\n   * Define o alinhamento do conteúdo do banner.\r\n   */\r\n  @Prop({ reflect: true }) alignment: TpBannerAlignment =\r\n    TP_BANNER.ALIGNMENT.LEFT;\r\n\r\n  /**\r\n   * Define se a animação está ativa ou não.\r\n   */\r\n  @State() animate = false;\r\n\r\n  /**\r\n   * Observa se o banner está na viewport.\r\n   */\r\n  observer: IntersectionObserver;\r\n\r\n  @Element() host: HTMLElement;\r\n\r\n  componentWillLoad() {\r\n    this.setupObserver();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  setupObserver() {\r\n    this.observer = new IntersectionObserver(\r\n      this.onObserverTriggered.bind(this),\r\n      {\r\n        root: this.slideMode\r\n          ? this.host.parentElement.parentElement\r\n          : this.host.parentElement,\r\n        threshold: 0.1,\r\n      },\r\n    );\r\n\r\n    this.observer.observe(this.host);\r\n  }\r\n\r\n  onObserverTriggered(entries: IntersectionObserverEntry[]) {\r\n    if (entries[0].isIntersecting && !this.animate) {\r\n      this.animate = true;\r\n      return;\r\n    }\r\n\r\n    if (this.animate) this.animate = false;\r\n  }\r\n\r\n  render() {\r\n    const { animate, alignment } = this;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          banner: true,\r\n          ['banner--animated']: animate,\r\n          [`banner--align-${alignment}`]: true,\r\n        }}\r\n      >\r\n        <div class=\"banner__container\">\r\n          <slot name=\"image\" />\r\n\r\n          <div class=\"banner__content\">\r\n            <slot name=\"content\"></slot>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}