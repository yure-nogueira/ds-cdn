{"version":3,"file":"avatar.stories.js","sourceRoot":"","sources":["../../../../../src/components/ionic/avatar/stories/avatar.stories.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,EAAE,mBAAmB,IAAI,yBAAyB,EAAE,MAAM,mCAAmC,CAAC;AACrG,OAAO,EAAE,mBAAmB,IAAI,wBAAwB,EAAE,MAAM,kCAAkC,CAAC;AAEnG,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,kBAAkB,GACnB,MAAM,4CAA4C,CAAC;AACpD,OAAO,EACL,WAAW,EACX,eAAe,EACf,aAAa,EACb,aAAa,EACb,eAAe,EACf,eAAe,GAChB,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AAGzD,yBAAyB,EAAE,CAAC;AAC5B,wBAAwB,EAAE,CAAC;AAE3B,MAAM,IAAI,GAAmE;IAC3E,KAAK,EAAE,yBAAyB;IAChC,QAAQ,EAAE;QACR,UAAU,EAAE;YACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;YAC3B,OAAO,EAAE,CAAC,GAAG,SAAS,EAAE,GAAG,iBAAiB,EAAE,GAAG,kBAAkB,CAAC;YACpE,WAAW,EAAE;;uBAEI,WAAW,CAAC,IAAI,WAAW,eAAe,CAAC,QAAQ,WAAW,eAAe,CAAC,QAAQ,WAAW,eAAe,CAAC,QAAQ,YAAY,aAAa,CAAC,MAAM;;oBAE5J,aAAa,CAAC,MAAM,mDAAmD;YACrF,KAAK,EAAE;gBACL,YAAY,EAAE;oBACZ,OAAO,EAAE,WAAW;iBACrB;gBACD,IAAI,EAAE;oBACJ,OAAO,EAAE;wBACP,GAAG,SAAS;wBACZ,GAAG,iBAAiB;wBACpB,GAAG,kBAAkB;qBACtB,CAAC,IAAI,CAAC,GAAG,CAAC;iBACZ;aACF;SACF;QACD,CAAC,SAAS,CAAC,EAAE;YACX,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;YAC3B,OAAO,EAAE,CAAC,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;YACtC,WAAW,EAAE,kCAAkC;YAC/C,KAAK,EAAE;gBACL,YAAY,EAAE;oBACZ,OAAO,EAAE,WAAW;iBACrB;gBACD,IAAI,EAAE;oBACJ,OAAO,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;iBAC5C;aACF;SACF;QACD,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;KACpC;CACF,CAAC;AAEF,eAAe,IAAI,CAAC;AAIpB,MAAM,CAAC,MAAM,OAAO,GAAU;IAC5B,MAAM,EAAE,CAAC,EAAW,EAAE,EAAE;YAAV,IAAI,cAAT,EAAW,CAAF;QAAO,OAAA,IAAI,CAAA;4BACH,IAAI,CAAC,UAAU,CAAC,cAAc,IAAI,CAAC,SAAS,CAAC;;;GAGtE,CAAA;KAAA;IACD;;;SAGK;CACN,CAAC","sourcesContent":["import { Components } from '@ionic/core';\nimport { defineCustomElement as defineCustomElementAvatar } from '@ionic/core/components/ion-avatar';\nimport { defineCustomElement as defineCustomElementLabel } from '@ionic/core/components/ion-label';\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport {\n  TP_COLORS,\n  TP_COLORS_MEDSOFT,\n  TP_COLORS_RECURSOS,\n} from '../../../../utils/constants/color.constant';\nimport {\n  TpColorAula,\n  TpColorMaterial,\n  TpColorOrange,\n  TpColorProvas,\n  TpColorQuestoes,\n  TpColorRevalida,\n} from '../../../../utils/enums/color.enum';\nimport { TP_ION_AVATAR } from '../utils/avatar.constant';\nimport { TpIonAvatar } from '../utils/avatar.type';\n\ndefineCustomElementAvatar();\ndefineCustomElementLabel();\n\nconst meta: Meta<Components.IonAvatar & Components.IonLabel & TpIonAvatar> = {\n  title: 'components/Ionic/Avatar',\n  argTypes: {\n    'tp-color': {\n      control: { type: 'select' },\n      options: [...TP_COLORS, ...TP_COLORS_MEDSOFT, ...TP_COLORS_RECURSOS],\n      description: `Define a cor do componente.\n\n**OBS**: As cores **'${TpColorAula.Aula}'**, **'${TpColorMaterial.Material}'**, **'${TpColorQuestoes.Questoes}'**, **'${TpColorRevalida.Revalida}'** e **'${TpColorProvas.Provas}'** estão disponiveis apenas no theme **MedSoft**.\n\n**OBS**: A cor **'${TpColorOrange.Orange}'** está disponivel apenas no theme **Recursos**.`,\n      table: {\n        defaultValue: {\n          summary: 'undefined',\n        },\n        type: {\n          summary: [\n            ...TP_COLORS,\n            ...TP_COLORS_MEDSOFT,\n            ...TP_COLORS_RECURSOS,\n          ].join('|'),\n        },\n      },\n    },\n    ['tp-size']: {\n      control: { type: 'select' },\n      options: [...TP_ION_AVATAR['tp-size']],\n      description: 'Define  o tamanho do componente.',\n      table: {\n        defaultValue: {\n          summary: 'undefined',\n        },\n        type: {\n          summary: TP_ION_AVATAR['tp-size'].join('|'),\n        },\n      },\n    },\n    color: { table: { disable: true } },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<Components.IonAvatar & Components.IonLabel & TpIonAvatar>;\n\nexport const Default: Story = {\n  render: ({ ...args }) => html`\n    <ion-avatar tp-color=\"${args['tp-color']}\" tp-size=\"${args['tp-size']}\">\n      <ion-label>AB</ion-label>\n    </ion-avatar>\n  `,\n  /* play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/ion-avatar/gi)).toBeTruthy();\n  }, */\n};\n"]}