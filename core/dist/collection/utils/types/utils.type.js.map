{"version":3,"file":"utils.type.js","sourceRoot":"","sources":["../../../src/utils/types/utils.type.ts"],"names":[],"mappings":"","sourcesContent":["export type TpLiteralUnion<T extends U, U = string> =\r\n  | T\r\n  | (U & Record<never, never>);\r\n\r\nexport type TpCssClassMap = { [className: string]: boolean };\r\n\r\ntype UnderscoreToCamelCase<S extends string> =\r\n  S extends `${infer First}_${infer Rest}`\r\n    ? `${First}${Capitalize<UnderscoreToCamelCase<Rest>>}`\r\n    : S;\r\n\r\nexport type TransformKeys<T> = {\r\n  [K in keyof T as UnderscoreToCamelCase<string & K>]: T[K];\r\n};\r\n"]}