/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { TpColor } from "./utils/types/color.type";
import { TpChartRadialSize } from "./components/templarios/chart-radial/utils/chart-radial.enum";
import { TpChartRadialItem } from "./components/templarios/chart-radial/utils/chart-radial.type";
import { TpHorizontalChartBarSize } from "./components/templarios/horizontal-chart-bar/utils/horizontal-chart-bar.enum";
import { TpLoaderType } from "./components/templarios/loader/utils/loader.type";
export { TpColor } from "./utils/types/color.type";
export { TpChartRadialSize } from "./components/templarios/chart-radial/utils/chart-radial.enum";
export { TpChartRadialItem } from "./components/templarios/chart-radial/utils/chart-radial.type";
export { TpHorizontalChartBarSize } from "./components/templarios/horizontal-chart-bar/utils/horizontal-chart-bar.enum";
export { TpLoaderType } from "./components/templarios/loader/utils/loader.type";
export namespace Components {
    interface DialogExample {
    }
    interface ModalExample {
    }
    interface SheetExample {
    }
    interface TpAlert {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
    }
    interface TpButtonCluster {
        /**
          * Define a variação de estado do componente.
         */
        "collapsed": boolean;
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        "toggleExternal": () => Promise<void>;
    }
    interface TpChartBar {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a altura do componente.
         */
        "height": number;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define se o componente irá apresentar rótulo ou não.
         */
        "noLabel": boolean;
        /**
          * Define o valor do preenchimento do componente.
         */
        "value": number;
        /**
          * Define a largura do componente.
         */
        "width": number;
    }
    interface TpChartRadial {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o valor representado pelo componente.
         */
        "items": TpChartRadialItem[];
        /**
          * Define a variação de tamanho do componente.
         */
        "size"?: TpChartRadialSize;
    }
    interface TpComparisonChartBar {
        /**
          * Define o valor da barra de progresso.
         */
        "barValue": number;
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a altura do componente.
         */
        "containerHeight": number;
        /**
          * Define a estilização do estado disabled do componente.
         */
        "disabled": boolean;
        /**
          * Se 'true' o componente vai renderizar o marker.
         */
        "hasMarker": boolean;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define a posição do marker na coluna.
         */
        "markerValue": number;
        /**
          * Define se um slot será disponibilizado para receber o label do chart.
         */
        "noLabel": boolean;
    }
    interface TpExample {
        "color"?: TpColor;
        "icon"?: string;
    }
    interface TpHorizontalChartBar {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define o valor máximo da barra de progresso.
         */
        "maxCount": number;
        /**
          * Define se um slot será disponibilizado para receber o label do chart.
         */
        "noLabel": boolean;
        /**
          * Define a variação de tamanho do componente.
         */
        "size"?: TpHorizontalChartBarSize;
        /**
          * Define o valor da barra de progresso.
         */
        "value": number;
    }
    interface TpInputContainer {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a estilização do estado disabled do componente.
         */
        "disabled": boolean;
        /**
          * ???
         */
        "inverted": boolean;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define a variação de estado do componente.
         */
        "state"?: 'error' | 'success';
    }
    interface TpLoader {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a posição do componente.
         */
        "fixed": boolean;
        /**
          * Define a variação do componente.
         */
        "tpName"?: TpLoaderType['tp-name'];
    }
    interface TpRateLike {
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define o status do componente.
         */
        "status"?: 'like' | 'dislike';
    }
    interface TpSegmentContainer {
    }
    interface TpTooltip {
        /**
          * Define a variação de estado do componente.
         */
        "collapsed": boolean;
        /**
          * todo
         */
        "color"?: TpColor;
        /**
          * Habilita o toggle no hover.
         */
        "hover"?: boolean;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define posicionamento em relação ao componente parent.
         */
        "placement"?: 'top' | 'bottom' | 'left' | 'right';
        /**
          * Define posicionamento horizontal do componente.
         */
        "position"?: 'start' | 'center' | 'end';
        /**
          * todo
         */
        "toggle": (event?: any) => Promise<void>;
        /**
          * todo
         */
        "toggleOnHover": (event?: any) => Promise<void>;
    }
}
export interface TpButtonClusterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTpButtonClusterElement;
}
export interface TpRateLikeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTpRateLikeElement;
}
declare global {
    interface HTMLDialogExampleElement extends Components.DialogExample, HTMLStencilElement {
    }
    var HTMLDialogExampleElement: {
        prototype: HTMLDialogExampleElement;
        new (): HTMLDialogExampleElement;
    };
    interface HTMLModalExampleElement extends Components.ModalExample, HTMLStencilElement {
    }
    var HTMLModalExampleElement: {
        prototype: HTMLModalExampleElement;
        new (): HTMLModalExampleElement;
    };
    interface HTMLSheetExampleElement extends Components.SheetExample, HTMLStencilElement {
    }
    var HTMLSheetExampleElement: {
        prototype: HTMLSheetExampleElement;
        new (): HTMLSheetExampleElement;
    };
    interface HTMLTpAlertElement extends Components.TpAlert, HTMLStencilElement {
    }
    var HTMLTpAlertElement: {
        prototype: HTMLTpAlertElement;
        new (): HTMLTpAlertElement;
    };
    interface HTMLTpButtonClusterElementEventMap {
        "tpButtonClusterCollapsed": boolean;
    }
    interface HTMLTpButtonClusterElement extends Components.TpButtonCluster, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTpButtonClusterElementEventMap>(type: K, listener: (this: HTMLTpButtonClusterElement, ev: TpButtonClusterCustomEvent<HTMLTpButtonClusterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTpButtonClusterElementEventMap>(type: K, listener: (this: HTMLTpButtonClusterElement, ev: TpButtonClusterCustomEvent<HTMLTpButtonClusterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTpButtonClusterElement: {
        prototype: HTMLTpButtonClusterElement;
        new (): HTMLTpButtonClusterElement;
    };
    interface HTMLTpChartBarElement extends Components.TpChartBar, HTMLStencilElement {
    }
    var HTMLTpChartBarElement: {
        prototype: HTMLTpChartBarElement;
        new (): HTMLTpChartBarElement;
    };
    interface HTMLTpChartRadialElement extends Components.TpChartRadial, HTMLStencilElement {
    }
    var HTMLTpChartRadialElement: {
        prototype: HTMLTpChartRadialElement;
        new (): HTMLTpChartRadialElement;
    };
    interface HTMLTpComparisonChartBarElement extends Components.TpComparisonChartBar, HTMLStencilElement {
    }
    var HTMLTpComparisonChartBarElement: {
        prototype: HTMLTpComparisonChartBarElement;
        new (): HTMLTpComparisonChartBarElement;
    };
    interface HTMLTpExampleElement extends Components.TpExample, HTMLStencilElement {
    }
    var HTMLTpExampleElement: {
        prototype: HTMLTpExampleElement;
        new (): HTMLTpExampleElement;
    };
    interface HTMLTpHorizontalChartBarElement extends Components.TpHorizontalChartBar, HTMLStencilElement {
    }
    var HTMLTpHorizontalChartBarElement: {
        prototype: HTMLTpHorizontalChartBarElement;
        new (): HTMLTpHorizontalChartBarElement;
    };
    interface HTMLTpInputContainerElement extends Components.TpInputContainer, HTMLStencilElement {
    }
    var HTMLTpInputContainerElement: {
        prototype: HTMLTpInputContainerElement;
        new (): HTMLTpInputContainerElement;
    };
    interface HTMLTpLoaderElement extends Components.TpLoader, HTMLStencilElement {
    }
    var HTMLTpLoaderElement: {
        prototype: HTMLTpLoaderElement;
        new (): HTMLTpLoaderElement;
    };
    interface HTMLTpRateLikeElementEventMap {
        "tpChange": 'like' | 'dislike';
    }
    interface HTMLTpRateLikeElement extends Components.TpRateLike, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTpRateLikeElementEventMap>(type: K, listener: (this: HTMLTpRateLikeElement, ev: TpRateLikeCustomEvent<HTMLTpRateLikeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTpRateLikeElementEventMap>(type: K, listener: (this: HTMLTpRateLikeElement, ev: TpRateLikeCustomEvent<HTMLTpRateLikeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTpRateLikeElement: {
        prototype: HTMLTpRateLikeElement;
        new (): HTMLTpRateLikeElement;
    };
    interface HTMLTpSegmentContainerElement extends Components.TpSegmentContainer, HTMLStencilElement {
    }
    var HTMLTpSegmentContainerElement: {
        prototype: HTMLTpSegmentContainerElement;
        new (): HTMLTpSegmentContainerElement;
    };
    interface HTMLTpTooltipElement extends Components.TpTooltip, HTMLStencilElement {
    }
    var HTMLTpTooltipElement: {
        prototype: HTMLTpTooltipElement;
        new (): HTMLTpTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "dialog-example": HTMLDialogExampleElement;
        "modal-example": HTMLModalExampleElement;
        "sheet-example": HTMLSheetExampleElement;
        "tp-alert": HTMLTpAlertElement;
        "tp-button-cluster": HTMLTpButtonClusterElement;
        "tp-chart-bar": HTMLTpChartBarElement;
        "tp-chart-radial": HTMLTpChartRadialElement;
        "tp-comparison-chart-bar": HTMLTpComparisonChartBarElement;
        "tp-example": HTMLTpExampleElement;
        "tp-horizontal-chart-bar": HTMLTpHorizontalChartBarElement;
        "tp-input-container": HTMLTpInputContainerElement;
        "tp-loader": HTMLTpLoaderElement;
        "tp-rate-like": HTMLTpRateLikeElement;
        "tp-segment-container": HTMLTpSegmentContainerElement;
        "tp-tooltip": HTMLTpTooltipElement;
    }
}
declare namespace LocalJSX {
    interface DialogExample {
    }
    interface ModalExample {
    }
    interface SheetExample {
    }
    interface TpAlert {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
    }
    interface TpButtonCluster {
        /**
          * Define a variação de estado do componente.
         */
        "collapsed"?: boolean;
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Emitido quando a propriedade collapsed é alterada.
         */
        "onTpButtonClusterCollapsed"?: (event: TpButtonClusterCustomEvent<boolean>) => void;
    }
    interface TpChartBar {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a altura do componente.
         */
        "height"?: number;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define se o componente irá apresentar rótulo ou não.
         */
        "noLabel"?: boolean;
        /**
          * Define o valor do preenchimento do componente.
         */
        "value"?: number;
        /**
          * Define a largura do componente.
         */
        "width"?: number;
    }
    interface TpChartRadial {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o valor representado pelo componente.
         */
        "items"?: TpChartRadialItem[];
        /**
          * Define a variação de tamanho do componente.
         */
        "size"?: TpChartRadialSize;
    }
    interface TpComparisonChartBar {
        /**
          * Define o valor da barra de progresso.
         */
        "barValue"?: number;
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a altura do componente.
         */
        "containerHeight"?: number;
        /**
          * Define a estilização do estado disabled do componente.
         */
        "disabled"?: boolean;
        /**
          * Se 'true' o componente vai renderizar o marker.
         */
        "hasMarker"?: boolean;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define a posição do marker na coluna.
         */
        "markerValue"?: number;
        /**
          * Define se um slot será disponibilizado para receber o label do chart.
         */
        "noLabel"?: boolean;
    }
    interface TpExample {
        "color"?: TpColor;
        "icon"?: string;
    }
    interface TpHorizontalChartBar {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define o valor máximo da barra de progresso.
         */
        "maxCount"?: number;
        /**
          * Define se um slot será disponibilizado para receber o label do chart.
         */
        "noLabel"?: boolean;
        /**
          * Define a variação de tamanho do componente.
         */
        "size"?: TpHorizontalChartBarSize;
        /**
          * Define o valor da barra de progresso.
         */
        "value"?: number;
    }
    interface TpInputContainer {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a estilização do estado disabled do componente.
         */
        "disabled"?: boolean;
        /**
          * ???
         */
        "inverted"?: boolean;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define a variação de estado do componente.
         */
        "state"?: 'error' | 'success';
    }
    interface TpLoader {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a posição do componente.
         */
        "fixed"?: boolean;
        /**
          * Define a variação do componente.
         */
        "tpName"?: TpLoaderType['tp-name'];
    }
    interface TpRateLike {
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Emitido quando a propriedade status é alterada.
         */
        "onTpChange"?: (event: TpRateLikeCustomEvent<'like' | 'dislike'>) => void;
        /**
          * Define o status do componente.
         */
        "status"?: 'like' | 'dislike';
    }
    interface TpSegmentContainer {
    }
    interface TpTooltip {
        /**
          * Define a variação de estado do componente.
         */
        "collapsed"?: boolean;
        /**
          * todo
         */
        "color"?: TpColor;
        /**
          * Habilita o toggle no hover.
         */
        "hover"?: boolean;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define posicionamento em relação ao componente parent.
         */
        "placement"?: 'top' | 'bottom' | 'left' | 'right';
        /**
          * Define posicionamento horizontal do componente.
         */
        "position"?: 'start' | 'center' | 'end';
    }
    interface IntrinsicElements {
        "dialog-example": DialogExample;
        "modal-example": ModalExample;
        "sheet-example": SheetExample;
        "tp-alert": TpAlert;
        "tp-button-cluster": TpButtonCluster;
        "tp-chart-bar": TpChartBar;
        "tp-chart-radial": TpChartRadial;
        "tp-comparison-chart-bar": TpComparisonChartBar;
        "tp-example": TpExample;
        "tp-horizontal-chart-bar": TpHorizontalChartBar;
        "tp-input-container": TpInputContainer;
        "tp-loader": TpLoader;
        "tp-rate-like": TpRateLike;
        "tp-segment-container": TpSegmentContainer;
        "tp-tooltip": TpTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dialog-example": LocalJSX.DialogExample & JSXBase.HTMLAttributes<HTMLDialogExampleElement>;
            "modal-example": LocalJSX.ModalExample & JSXBase.HTMLAttributes<HTMLModalExampleElement>;
            "sheet-example": LocalJSX.SheetExample & JSXBase.HTMLAttributes<HTMLSheetExampleElement>;
            "tp-alert": LocalJSX.TpAlert & JSXBase.HTMLAttributes<HTMLTpAlertElement>;
            "tp-button-cluster": LocalJSX.TpButtonCluster & JSXBase.HTMLAttributes<HTMLTpButtonClusterElement>;
            "tp-chart-bar": LocalJSX.TpChartBar & JSXBase.HTMLAttributes<HTMLTpChartBarElement>;
            "tp-chart-radial": LocalJSX.TpChartRadial & JSXBase.HTMLAttributes<HTMLTpChartRadialElement>;
            "tp-comparison-chart-bar": LocalJSX.TpComparisonChartBar & JSXBase.HTMLAttributes<HTMLTpComparisonChartBarElement>;
            "tp-example": LocalJSX.TpExample & JSXBase.HTMLAttributes<HTMLTpExampleElement>;
            "tp-horizontal-chart-bar": LocalJSX.TpHorizontalChartBar & JSXBase.HTMLAttributes<HTMLTpHorizontalChartBarElement>;
            "tp-input-container": LocalJSX.TpInputContainer & JSXBase.HTMLAttributes<HTMLTpInputContainerElement>;
            "tp-loader": LocalJSX.TpLoader & JSXBase.HTMLAttributes<HTMLTpLoaderElement>;
            "tp-rate-like": LocalJSX.TpRateLike & JSXBase.HTMLAttributes<HTMLTpRateLikeElement>;
            "tp-segment-container": LocalJSX.TpSegmentContainer & JSXBase.HTMLAttributes<HTMLTpSegmentContainerElement>;
            "tp-tooltip": LocalJSX.TpTooltip & JSXBase.HTMLAttributes<HTMLTpTooltipElement>;
        }
    }
}
