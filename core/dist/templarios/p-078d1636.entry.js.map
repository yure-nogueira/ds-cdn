{"version":3,"names":["TpBannerAlignment","TP_BANNER","ALIGNMENT","Object","fromEntries","entries","ALIGNMENT_VALUES","values","bannerCss","TpBannerStyle0","TpBanner","LEFT","componentWillLoad","this","setupObserver","disconnectedCallback","observer","disconnect","IntersectionObserver","onObserverTriggered","bind","root","slideMode","host","parentElement","threshold","observe","isIntersecting","animate","render","alignment","h","Host","key","class","banner","name"],"sources":["src/components/elementor/core/banner/utils/banner.enum.ts","src/components/elementor/core/banner/utils/banner.constant.ts","src/components/elementor/core/banner/banner.scss?tag=tp-banner&encapsulation=scoped","src/components/elementor/core/banner/banner.tsx"],"sourcesContent":["export enum TpBannerAlignment {\r\n  LEFT = 'left',\r\n  CENTER = 'center',\r\n  RIGHT = 'right',\r\n}\r\n","import { TpBannerAlignment } from './banner.enum';\r\n\r\nexport const TP_BANNER = {\r\n  ALIGNMENT: Object.fromEntries(Object.entries(TpBannerAlignment)),\r\n  ALIGNMENT_VALUES: Object.values(TpBannerAlignment),\r\n};\r\n","@import '../../../../styles/templarios.abstracts';\r\n\r\n:host {\r\n  display: block;\r\n  overflow: hidden;\r\n}\r\n\r\n.banner {\r\n  &__container {\r\n    display: flex;\r\n    position: relative;\r\n  }\r\n\r\n  &__content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    ::slotted([slot='content']) {\r\n      height: 100%;\r\n    }\r\n  }\r\n\r\n  ::slotted([slot='image']) {\r\n    display: flex;\r\n    width: 100%;\r\n    transition: 500ms transform ease-in-out;\r\n    transform: scale(1.15);\r\n\r\n    img {\r\n      object-fit: cover;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n  }\r\n\r\n  // estiliza o componente news-hero quando é passado por slot\r\n  ::slotted([slot='image'][news-hero]) {\r\n    min-height: 400px;\r\n\r\n    @include breakpoint-down('lg') {\r\n      min-height: 320px;\r\n    }\r\n\r\n    @include breakpoint-down('md') {\r\n      min-height: 280px;\r\n    }\r\n  }\r\n}\r\n\r\n//\r\n// alignment\r\n//\r\n:host(.banner--align-center) .banner__content {\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n:host(.banner--align-right) .banner__content {\r\n  left: unset;\r\n  right: 0;\r\n}\r\n\r\n//\r\n// animated\r\n//\r\n:host(.banner--animated) {\r\n  ::slotted([slot='image']) {\r\n    transform: scale(1);\r\n    transition: 5s transform cubic-bezier(0.165, 0.84, 0.44, 1);\r\n  }\r\n}\r\n","import { Component, Element, Host, Prop, State, h } from '@stencil/core';\r\nimport { TpBannerAlignment } from './utils/banner.type';\r\nimport { TP_BANNER } from './utils/banner.constant';\r\n\r\n@Component({\r\n  tag: 'tp-banner',\r\n  styleUrl: 'banner.scss',\r\n  scoped: true,\r\n})\r\nexport class TpBanner {\r\n  /**\r\n   * Define se o componente é ou não usado como slide.\r\n   */\r\n  @Prop({ reflect: true }) slideMode = false;\r\n\r\n  /**\r\n   * Define o alinhamento do conteúdo do banner.\r\n   */\r\n  @Prop({ reflect: true }) alignment: TpBannerAlignment =\r\n    TP_BANNER.ALIGNMENT.LEFT;\r\n\r\n  /**\r\n   * Define se a animação está ativa ou não.\r\n   */\r\n  @State() animate = false;\r\n\r\n  /**\r\n   * Observa se o banner está na viewport.\r\n   */\r\n  observer: IntersectionObserver;\r\n\r\n  @Element() host: HTMLElement;\r\n\r\n  componentWillLoad() {\r\n    this.setupObserver();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  setupObserver() {\r\n    this.observer = new IntersectionObserver(\r\n      this.onObserverTriggered.bind(this),\r\n      {\r\n        root: this.slideMode\r\n          ? this.host.parentElement.parentElement\r\n          : this.host.parentElement,\r\n        threshold: 0.1,\r\n      },\r\n    );\r\n\r\n    this.observer.observe(this.host);\r\n  }\r\n\r\n  onObserverTriggered(entries: IntersectionObserverEntry[]) {\r\n    if (entries[0].isIntersecting && !this.animate) {\r\n      this.animate = true;\r\n      return;\r\n    }\r\n\r\n    if (this.animate) this.animate = false;\r\n  }\r\n\r\n  render() {\r\n    const { animate, alignment } = this;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          banner: true,\r\n          ['banner--animated']: animate,\r\n          [`banner--align-${alignment}`]: true,\r\n        }}\r\n      >\r\n        <div class=\"banner__container\">\r\n          <slot name=\"image\" />\r\n\r\n          <div class=\"banner__content\">\r\n            <slot name=\"content\"></slot>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"yDAAA,IAAYA,GAAZ,SAAYA,GACVA,EAAA,eACAA,EAAA,mBACAA,EAAA,gBACD,EAJD,CAAYA,MAAiB,KCEtB,MAAMC,EAAY,CACvBC,UAAWC,OAAOC,YAAYD,OAAOE,QAAQL,IAC7CM,iBAAkBH,OAAOI,OAAOP,ICJlC,MAAMQ,EAAY,wjDAClB,MAAAC,EAAeD,E,MCQFE,EAAQ,M,wCAIkB,M,eAMnCT,EAAUC,UAAUS,K,aAKH,K,CASnB,iBAAAC,GACEC,KAAKC,e,CAGP,oBAAAC,GACEF,KAAKG,SAASC,Y,CAGhB,aAAAH,GACED,KAAKG,SAAW,IAAIE,qBAClBL,KAAKM,oBAAoBC,KAAKP,MAC9B,CACEQ,KAAMR,KAAKS,UACPT,KAAKU,KAAKC,cAAcA,cACxBX,KAAKU,KAAKC,cACdC,UAAW,KAIfZ,KAAKG,SAASU,QAAQb,KAAKU,K,CAG7B,mBAAAJ,CAAoBd,GAClB,GAAIA,EAAQ,GAAGsB,iBAAmBd,KAAKe,QAAS,CAC9Cf,KAAKe,QAAU,KACf,M,CAGF,GAAIf,KAAKe,QAASf,KAAKe,QAAU,K,CAGnC,MAAAC,GACE,MAAMD,QAAEA,EAAOE,UAAEA,GAAcjB,KAE/B,OACEkB,EAACC,EAAI,CAAAC,IAAA,2CACHC,MAAO,CACLC,OAAQ,KACR,CAAC,oBAAqBP,EACtB,CAAC,iBAAiBE,KAAc,OAGlCC,EAAA,OAAAE,IAAA,2CAAKC,MAAM,qBACTH,EAAA,QAAAE,IAAA,2CAAMG,KAAK,UAEXL,EAAA,OAAAE,IAAA,2CAAKC,MAAM,mBACTH,EAAA,QAAAE,IAAA,2CAAMG,KAAK,c"}