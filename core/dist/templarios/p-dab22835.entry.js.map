{"version":3,"names":["TpEnumPaginationRole","TpEnumPaginationSize","TpEnumPaginationDirection","TP_PAGINATION","ROLE","Object","fromEntries","entries","DIRECTION","SIZES","values","BUTTON_LIMIT","HIDDEN_BUTTON_LABEL","DEFAULT_COLOR","DEFAULT_SIZE","paginationCss","TpPaginationStyle0","TpPagination","onPaginationButtonClick","buttonConfig","label","role","direction","GOTO","this","tpNavigate","emit","HIDDEN","tpPageJump","PREVIOUS","tpPrevious","NEXT","tpNext","getPaginationButtons","color","size","pageCount","currentPage","Array","from","length","map","_","index","pageIndex","includes","Math","abs","BACKWARD","FORWARD","filter","h","onClick","class","disabled","render","paginationButtons","Host","key","createColorClasses","fill","slot","src"],"sources":["src/components/core/pagination/utils/pagination.enum.ts","src/components/core/pagination/utils/pagination.contant.ts","src/components/core/pagination/pagination.scss?tag=tp-pagination&encapsulation=scoped","src/components/core/pagination/pagination.tsx"],"sourcesContent":["export enum TpEnumPaginationRole {\r\n  GOTO = 'goto',\r\n  HIDDEN = 'hidden',\r\n  PREVIOUS = 'previous',\r\n  NEXT = 'next',\r\n}\r\n\r\nexport enum TpEnumPaginationSize {\r\n  XS = 'xs',\r\n  SM = 'sm',\r\n}\r\n\r\nexport enum TpEnumPaginationDirection {\r\n  FORWARD = 'forward',\r\n  BACKWARD = 'backward',\r\n}\r\n","import {\r\n  TpEnumPaginationDirection,\r\n  TpEnumPaginationRole,\r\n  TpEnumPaginationSize,\r\n} from './pagination.enum';\r\nimport { TpPaginationConfig } from './pagination.type';\r\n\r\nexport const TP_PAGINATION: TpPaginationConfig = {\r\n  ROLE: Object.fromEntries(Object.entries(TpEnumPaginationRole)),\r\n  DIRECTION: Object.fromEntries(Object.entries(TpEnumPaginationDirection)),\r\n  SIZES: Object.values(TpEnumPaginationSize),\r\n  BUTTON_LIMIT: 5,\r\n  HIDDEN_BUTTON_LABEL: '...',\r\n  DEFAULT_COLOR: 'neutral-2',\r\n  DEFAULT_SIZE: 'xs',\r\n};\r\n","@import '../../../styles/templarios.abstracts';\r\n\r\n:host {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n}\r\n\r\n.tp-pagination {\r\n  &__item {\r\n    --border-radius: 4px;\r\n    --padding-start: 16px;\r\n    --padding-end: 16px;\r\n\r\n    &:not(:first-child) {\r\n      margin-left: 0.8rem;\r\n    }\r\n  }\r\n}\r\n","import { Component, Host, h, Prop, EventEmitter, Event } from '@stencil/core';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\nimport {\r\n  TpPaginationButtonConfig,\r\n  TpPaginationDirection,\r\n  TpPaginationSize,\r\n} from './utils/pagination.type';\r\nimport { TP_PAGINATION } from './utils/pagination.contant';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\n\r\n@Component({\r\n  tag: 'tp-pagination',\r\n  styleUrl: 'pagination.scss',\r\n  scoped: true,\r\n})\r\nexport class TpPagination {\r\n  /**\r\n   * A variação de cor dos botões do componente.\r\n   */\r\n  @Prop({ reflect: true }) color: TpColor = TP_PAGINATION.DEFAULT_COLOR;\r\n\r\n  /**\r\n   * A variação de tamanho dos botões do componente.\r\n   */\r\n  @Prop({ reflect: true }) size: TpPaginationSize = TP_PAGINATION.DEFAULT_SIZE;\r\n\r\n  /**\r\n   * O número total de páginas.\r\n   */\r\n  @Prop({ reflect: true }) pageCount: number;\r\n\r\n  /**\r\n   * Índice da página atual.\r\n   */\r\n  @Prop({ reflect: true }) currentPage: number;\r\n\r\n  /**\r\n   * Emitido quando há clique no botão de uma página específica.\r\n   */\r\n  @Event() tpNavigate: EventEmitter<number>;\r\n\r\n  /**\r\n   * Emitido quando há clique no botão de seguir para a página anterior.\r\n   */\r\n  @Event() tpPrevious: EventEmitter<null>;\r\n\r\n  /**\r\n   * Emitido quando há clique no botão de seguir para a próxima página.\r\n   */\r\n  @Event() tpNext: EventEmitter<null>;\r\n\r\n  /**\r\n   * Emitido quando há clique no botão que oculta páginas\r\n   * específicas, não mostradas nos botões do estado atual.\r\n   */\r\n  @Event() tpPageJump: EventEmitter<TpPaginationDirection>;\r\n\r\n  onPaginationButtonClick(buttonConfig: TpPaginationButtonConfig) {\r\n    const { label, role, direction } = buttonConfig;\r\n\r\n    if (role === TP_PAGINATION.ROLE.GOTO) return this.tpNavigate.emit(+label);\r\n\r\n    if (role === TP_PAGINATION.ROLE.HIDDEN)\r\n      return this.tpPageJump.emit(direction);\r\n\r\n    if (role === TP_PAGINATION.ROLE.PREVIOUS) return this.tpPrevious.emit();\r\n\r\n    if (role === TP_PAGINATION.ROLE.NEXT) return this.tpNext.emit();\r\n  }\r\n\r\n  getPaginationButtons() {\r\n    const { color, size, pageCount, currentPage } = this;\r\n\r\n    return Array.from({ length: pageCount })\r\n      .map((_, index) => {\r\n        const pageIndex = index + 1;\r\n\r\n        /**\r\n         * Se o número total de páginas (pageCount) for menor que 'BUTTON_LIMIT',\r\n         * mostra todos os botões de navegação\r\n         * BUTTON_LIMIT: numéro máximo que o total de páginas (pageCount)\r\n         * deve ter para que sejam mostrados todos os botões de navegação.\r\n         */\r\n        if (pageCount <= TP_PAGINATION.BUTTON_LIMIT) {\r\n          return {\r\n            label: pageIndex,\r\n            role: TP_PAGINATION.ROLE.GOTO,\r\n            direction: null,\r\n          } as TpPaginationButtonConfig;\r\n        }\r\n\r\n        /**\r\n         * Se a página atual for a primeira ou a última e a distância\r\n         * entre os índices do botão atual e página atual for menor ou igual a 2,\r\n         * o botão do índice atual deverá ser renderizado.\r\n         */\r\n        if (\r\n          [1, pageCount].includes(currentPage) &&\r\n          Math.abs(pageIndex - currentPage) <= 2\r\n        ) {\r\n          return {\r\n            label: pageIndex,\r\n            role: TP_PAGINATION.ROLE.GOTO,\r\n            direction: null,\r\n          } as TpPaginationButtonConfig;\r\n        }\r\n\r\n        /**\r\n         * Se o índice atual estiver entre o primeiro e a página atual (currentPage),\r\n         * o primeiro botão a cair nessa condição será renderizado como hidden\r\n         * e representará todos os outros índices que cairem nessa condição em\r\n         * sequência, até encontrar um botão que será renderizado.\r\n         */\r\n        if (pageIndex > 1 && pageIndex < currentPage - 1) {\r\n          return {\r\n            label: TP_PAGINATION.HIDDEN_BUTTON_LABEL,\r\n            role: pageIndex - 1 === 1 ? TP_PAGINATION.ROLE.HIDDEN : null,\r\n            direction: TP_PAGINATION.DIRECTION.BACKWARD,\r\n          } as TpPaginationButtonConfig;\r\n        }\r\n\r\n        /**\r\n         * Se o índice atual estiver entre a página atual (currentPage) e a última\r\n         * página, o primeiro botão a cair nessa condição será renderizado como\r\n         * hidden e representará todos os outros índices que cairem nessa condição em\r\n         * sequência, até encontrar um botão que será renderizado.\r\n         */\r\n        if (pageIndex < pageCount && pageIndex > currentPage + 1) {\r\n          return {\r\n            label: TP_PAGINATION.HIDDEN_BUTTON_LABEL,\r\n            role:\r\n              pageIndex === pageCount - 1 ? TP_PAGINATION.ROLE.HIDDEN : null,\r\n            direction: TP_PAGINATION.DIRECTION.FORWARD,\r\n          } as TpPaginationButtonConfig;\r\n        }\r\n\r\n        /**\r\n         * Caso 'default' para todos os botões com índices que não caem\r\n         * em nenhuma das condições acima.\r\n         */\r\n        return {\r\n          label: pageIndex,\r\n          role: TP_PAGINATION.ROLE.GOTO,\r\n          direction: null,\r\n        } as TpPaginationButtonConfig;\r\n      })\r\n      .filter(({ role }) => role)\r\n      .map((buttonConfig) => (\r\n        <ion-button\r\n          onClick={() => this.onPaginationButtonClick(buttonConfig)}\r\n          class=\"tp-pagination__item\"\r\n          color={color}\r\n          // @ts-ignore\r\n          size={size}\r\n          disabled={+buttonConfig.label === currentPage}\r\n        >\r\n          {buttonConfig.label}\r\n        </ion-button>\r\n      ));\r\n  }\r\n\r\n  render() {\r\n    const { color, size, pageCount, currentPage } = this;\r\n\r\n    const paginationButtons = this.getPaginationButtons();\r\n\r\n    return (\r\n      <Host class={createColorClasses(color, { ['tp-pagination']: true })}>\r\n        {pageCount > 1 && (\r\n          <ion-button\r\n            onClick={() =>\r\n              this.onPaginationButtonClick({\r\n                role: TP_PAGINATION.ROLE.PREVIOUS,\r\n              })\r\n            }\r\n            class=\"tp-pagination__item\"\r\n            color={color}\r\n            // @ts-ignore\r\n            size={size}\r\n            fill=\"clear\"\r\n            disabled={currentPage === 1}\r\n          >\r\n            <ion-icon\r\n              slot=\"start\"\r\n              src=\"./assets/tp-chevron-left.svg\"\r\n            ></ion-icon>\r\n          </ion-button>\r\n        )}\r\n\r\n        {paginationButtons}\r\n\r\n        {pageCount > 1 && (\r\n          <ion-button\r\n            onClick={() =>\r\n              this.onPaginationButtonClick({ role: TP_PAGINATION.ROLE.NEXT })\r\n            }\r\n            class=\"tp-pagination__item\"\r\n            color={color}\r\n            // @ts-ignore\r\n            size={size}\r\n            fill=\"clear\"\r\n            disabled={currentPage === pageCount}\r\n          >\r\n            <ion-icon\r\n              slot=\"start\"\r\n              src=\"./assets/tp-chevron-right.svg\"\r\n            ></ion-icon>\r\n          </ion-button>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}